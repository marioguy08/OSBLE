{"version":3,"sources":["AppMode.js","components/Dropdown.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/CreateEditAccountDialog.js","components/ConfirmDeleteAccount.js","components/ResetPasswordPage.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/RegisterPage.js","components/GradesPage.js","components/AssignmentsPage.js","components/AnalyticsPage.js","components/CourseSettingsPage.js","components/UsersPage.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","RESET","ASSIGNMENTS","GRADES","COURSE_SETTINGS","ANALYTICS","USERS","REGISTER","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","Dropdown","state","displayMenu","showDropdownMenu","bind","hideDropdownMenu","event","preventDefault","this","setState","document","addEventListener","removeEventListener","className","role","style","width","onClick","href","React","Component","NavBar","props","getMenuBtnIcon","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","switchMode","newMode","renderStudentMode","dashboard","assignments","grades","renderInstructorMode","users","settings","analytics","src","alt","height","SideMenu","renderModeMenuItems","profilePicURL","id","displayName","localAccount","editAccount","showAbout","logOut","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","current","setCustomValidity","handleChange","formUpdated","origAccountInfo","formIsUpdated","target","name","value","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","deleteAccount","confirmDelete","confirmDeleteAccount","e","newUserRef","createRef","userId","json","parse","ResetPasswordPage","resetPasswordRef","resetPasswordRepeatRef","resetPassword","focus","errorMsg","checkForSubmit","code","position","right","cancelResetPassword","onSubmit","type","placeholder","pattern","ref","onKeyUp","LookUpAccountDialog","handleLookUpAccount","emailRef","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","size","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","rows","cols","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","accountCreateDone","msg","statusMsg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPasswordPage","handleOAuthLogin","provider","window","open","handleOAuthLoginClick","setTimeout","pw","showResetPaswordDialog","deleted","closeStatusMsg","reset","signUp","emailInputRef","passwordInputRef","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","padding","fontSize","fontWeight","backgroundColor","required","cancel","FeedPage","fontStyle","ConfirmDeleteRound","close","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","onChange","maxLength","max","disabled","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","RegisterPage","createAccount","handleRegister","email","confirm_email","confirm_password","first_name","confirm_first_name","last_name","confirm_last_name","confirm_id","handleOnChange","school","confirm_emailRef","passwordRef","confirm_passwordRef","fnameRef","confirm_fnameRef","lnameRef","confirm_lnameRef","IDRef","confirmIDRef","validated","color","autocomplete","GradesPage","AssignmentsPage","AnalyticsPage","CourseSettingsPage","UsersPage","modeTitle","modeToPage","Register","ResetPassword","Grades","Users","Analytics","Assignments","CourseSettings","App","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd947350.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    RESET: \"ResetMode\",\r\n    ASSIGNMENTS: \"AssignmentsMode\",\r\n    GRADES: \"GradesMode\",\r\n    COURSE_SETTINGS : \"CourseSettingsMode\",\r\n    ANALYTICS: \"AnalyticsMode\",\r\n    USERS: \"UsersMode\",\r\n    REGISTER : \"RegisterMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\n\r\n\r\nclass Dropdown extends React.Component {\r\nconstructor(){\r\n super();\r\n\r\n this.state = {\r\n       displayMenu: false,\r\n     };\r\n\r\n  this.showDropdownMenu = this.showDropdownMenu.bind(this);\r\n  this.hideDropdownMenu = this.hideDropdownMenu.bind(this);\r\n\r\n};\r\n\r\nshowDropdownMenu(event) {\r\n    event.preventDefault();\r\n    this.setState({ displayMenu: true }, () => {\r\n    document.addEventListener('click', this.hideDropdownMenu);\r\n    });\r\n  }\r\n\r\n  hideDropdownMenu() {\r\n    this.setState({ displayMenu: false }, () => {\r\n      document.removeEventListener('click', this.hideDropdownMenu);\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div  className=\"modal-dropdown dropdown\" role=\"dialog\" style = {{width:\"200px\"}} >\r\n         <div className=\"button\" onClick={this.showDropdownMenu}> Hermes Obiang </div>\r\n\r\n          { this.state.displayMenu ? (\r\n          <ul>\r\n         <li><a className=\"active\" href=\"#Create Page\">View Profile</a></li>\r\n         <li><a href=\"#Manage Pages\">Settings</a></li>\r\n         <li><a href=\"#Log Out\">Log Out</a></li>\r\n          </ul>\r\n        ):\r\n        (\r\n          null\r\n        )\r\n        }\r\n\r\n       </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport Dropdown from './Dropdown'\r\n\r\nclass NavBar extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n  switchMode = (newMode) =>{\r\n    this.props.changeMode(newMode);\r\n  }\r\n\r\n  renderStudentMode = () =>{\r\n    return(\r\n      <div>\r\n       <span>&nbsp;&nbsp;&nbsp;</span>\r\n      <span className={ this.props.mode == AppMode.FEED ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.FEED)}>\r\n        &nbsp;{this.props.dashboard}&nbsp;\r\n      </span>\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.ASSIGNMENTS ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.ASSIGNMENTS)}>\r\n        &nbsp;{this.props.assignments}&nbsp;\r\n      </span>\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.GRADES ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.GRADES)}>\r\n        &nbsp;{this.props.grades}&nbsp;\r\n      </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  renderInstructorMode = () =>{\r\n    return(\r\n      <div>\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n      <span className={ this.props.mode == AppMode.FEED ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.FEED)}>\r\n        &nbsp;&nbsp;{this.props.dashboard}&nbsp;\r\n      </span>\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.ASSIGNMENTS ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.ASSIGNMENTS)}>\r\n        &nbsp;{this.props.assignments}&nbsp;\r\n      </span>\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.GRADES ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.GRADES)}>\r\n        &nbsp;{this.props.grades}&nbsp;\r\n      </span>\r\n\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.USERS ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.USERS)}>\r\n        &nbsp;{this.props.users}&nbsp;\r\n      </span>\r\n\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.COURSE_SETTINGS ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.COURSE_SETTINGS)}>\r\n        &nbsp;{this.props.settings}&nbsp;\r\n      </span>\r\n\r\n      <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      <span className={ this.props.mode == AppMode.ANALYTICS ? \"navbar-title item-selected\": \"navbar-title\"} onClick={() =>this.switchMode(AppMode.ANALYTICS)}>\r\n        &nbsp;{this.props.analytics}&nbsp;\r\n      </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <img src=\"osble3.png\" alt=\"osble Logo\" height=\"50px\" onClick={() =>this.switchMode(AppMode.FEED)} width=\"100px\" className=\"navbar-items\"/>\r\n      {/* {this.renderStudentMode()} */}\r\n      {this.renderInstructorMode()}\r\n    </span>\r\n    <span className=\"navbar-items-right\">\r\n    <span className=\"navbar-title\">\r\n        &nbsp;Help\r\n      </span>\r\n      <Dropdown/>\r\n      <span className=\"navbar-title\">\r\n        &nbsp;Help\r\n      </span>\r\n      \r\n  \r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ||  this.props.mode === AppMode.REGISTER? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED  || this.props.mode === AppMode.REGISTER? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n//     render() {\r\n//     return (  \r\n//     <div className=\"modal\" role=\"dialog\">\r\n//     <div className=\"modal-dialog modal-lg\"></div>\r\n//         <div className=\"modal-content form-center\">\r\n//             <div className=\"modal-header\">\r\n//               <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n//               <button className=\"modal-close\" \r\n//                        onClick={this.props.cancel}>\r\n//                 &times;</button>\r\n//             </div>\r\n//             <div className=\"modal-body\">\r\n//             <form onSubmit={this.handleSubmit}>\r\n//             <label>\r\n//                 Email: \r\n//                 <input  \r\n//                 autocomplete=\"off\"\r\n//                 disabled={!this.props.create}\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"accountName\"\r\n//                 type=\"email\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Enter Email Address\"\r\n//                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n//                 required={true}\r\n//                 ref={this.newUserRef}\r\n//                 value={this.state.accountName}\r\n//                 onChange={this.handleChange}\r\n//                 onBlur={this.setDefaultDisplayName}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Password:\r\n//                 <input\r\n//                 autocomplete=\"off\"\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"password\"\r\n//                 type=\"password\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Enter Password\"\r\n//                 pattern=\r\n//                 \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n//                 required={true}\r\n//                 value={this.state.password}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Repeat Password:\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"passwordRepeat\"\r\n//                 type=\"password\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Repeat Password\"\r\n//                 required={true}\r\n//                 ref={this.repeatPassRef}\r\n//                 value={this.state.passwordRepeat}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Display Name:\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"displayName\"\r\n//                 type=\"text\"\r\n//                 size=\"30\"\r\n//                 placeholder=\"Display Name\"\r\n//                 required={true}\r\n//                 value={this.state.displayName}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Profile Picture:<br/>\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"profilePic\"\r\n//                 type=\"file\"\r\n//                 accept=\"image/x-png,image/gif,image/jpeg\" \r\n//                 ref={this.profilePicRef}\r\n//                 value={this.state.profilePic}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//                 <img src={this.state.profilePicURL != \"\" ? \r\n//                             this.state.profilePicURL :\r\n//                             this.state.profilePicDataURL} \r\n//                         height=\"60\" width=\"60\" \r\n//                  />\r\n//             </label> \r\n//             <br/>\r\n//             <label>\r\n//                 Security Question:\r\n//                 <textarea\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"securityQuestion\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Security Question\"\r\n//                 rows=\"2\"\r\n//                 cols=\"35\"\r\n//                 maxLength=\"100\"\r\n//                 required={true}\r\n//                 value={this.state.securityQuestion}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Answer to Security Question:\r\n//                 <textarea\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"securityAnswer\"\r\n//                 type=\"text\"\r\n//                 placeholder=\"Answer\"\r\n//                 rows=\"2\"\r\n//                 cols=\"35\"\r\n//                 maxLength=\"100\"\r\n//                 required={true}\r\n//                 value={this.state.securityAnswer}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             {!this.props.create ?  \r\n//             <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n//                 Delete Account...\r\n//             </button> : null}\r\n//             <br/><br/>\r\n//             <button role=\"submit\" \r\n//                 disabled={!this.state.formUpdated}\r\n//                 className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n//                 <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n//                 &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n//             </button>\r\n//             </form>\r\n//             </div>\r\n//         </div>\r\n//         {this.state.confirmDelete ? \r\n//           <ConfirmDeleteAccount email={this.state.accountName}\r\n//                                 deleteAccount={this.deleteAccount}\r\n//                                 close={() => (this.setState({confirmDelete: false}))}\r\n//          /> : null}\r\n//     </div>\r\n//     );\r\n// }\r\n\r\n\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react'\r\nimport AppMode from \"../AppMode.js\"\r\n\r\nclass ResetPasswordPage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"osblepage\">\r\n                <center>\r\n                    <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{position:\"relative\",right:\".7rem\"}}></img>\r\n                </center>\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                            </h3>\r\n                            <button className=\"modal-close\" \r\n                                onClick={this.props.cancelResetPassword}>\r\n                                &times;\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                            <form onSubmit={this.handleSubmit}>\r\n                            <label>\r\n                                New Password: \r\n                                <input\r\n                                type=\"password\"\r\n                                placeholder=\"Enter new password\"\r\n                                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                                className=\"form-control form-text\"\r\n                                ref={this.resetPasswordRef}\r\n                                />\r\n                            </label>\r\n                            <br></br>\r\n                            <label>\r\n                                Repeat New Password: \r\n                                <input\r\n                                type=\"password\"\r\n                                id=\"repeatPassword\"\r\n                                placeholder=\"Repeat new password\"\r\n                                className=\"form-control form-text\"\r\n                                onKeyUp={this.checkForSubmit}\r\n                                ref={this.resetPasswordRepeatRef}\r\n                                />\r\n                            </label>\r\n                            <br></br>\r\n                            <button role=\"submit\" \r\n                            className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                                <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                            </button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordPage;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordPage from './ResetPasswordPage.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport './LoginPage.css';\r\nimport AppMode from '../AppMode.js';\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.emailInputRef = React.createRef();\r\n        this.resetUserId = \"\";\r\n        this.resetQ = \"\";\r\n        this.resetA = \"\";\r\n        this.passwordInputRef = React.createRef();\r\n        this.state = {\r\n            statusMsg: \"\",\r\n            loginBtnIcon: \"fa fa-sign-in\",\r\n            loginBtnLabel: \"Log In\",\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: false,\r\n            showResetPasswordPage: false,\r\n            githubIcon: \"fa fa-github\",\r\n            githubLabel: \"Sign in with GitHub\",\r\n            loginMsg: \"\",\r\n            newAccountCreated: false\r\n        };\r\n    }\r\n\r\n    //Focus cursor in email input field when mounted\r\n    componentDidMount() {\r\n        this.emailInputRef.current.focus();\r\n    }\r\n\r\n    //handleLoginSubmit -- Called when user clicks on login button.\r\n    handleLoginSubmit = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n            loginBtnLabel: \"\"\r\n        });\r\n\r\n        this.props.changeMode(AppMode.FEED);\r\n        // const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n        //     \"&password=\" + this.passwordInputRef.current.value;\r\n        // const res = await fetch(url, { method: 'POST' });\r\n        // if (res.status == 200) { //successful login!\r\n        //     window.open(\"/\", \"_self\");\r\n        // } else { //Unsuccessful login\r\n        //     const resText = await res.text();\r\n        //     this.setState({\r\n        //         loginBtnIcon: \"fa fa-sign-in\",\r\n        //         loginBtnLabel: \"Log In\",\r\n        //         statusMsg: resText\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    //accountCreateDone -- Called by child CreateAccountDialog component when \r\n    //user attempted to create new account. Hide the dialog and display \r\n    //a message indicating result of the attempt.\r\n    accountCreateDone = (msg) => {\r\n        this.setState({\r\n            statusMsg: msg,\r\n            showCreateAccountDialog: false\r\n        });\r\n    }\r\n\r\n    //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n    //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n    cancelCreateAccount = () => {\r\n        this.setState({ showCreateAccountDialog: false });\r\n    }\r\n\r\n    //cancelResetPassword -- Called by one of the child three child dialog box components when\r\n    //the user decides to cancel resetting their password. Toggles state so that all three\r\n    //of the dialog boxes are hidden\r\n    cancelResetPassword = () => {\r\n        this.resetUserId = \"\";\r\n        this.resetQ = \"\";\r\n        this.resetA = \"\";\r\n        this.setState({\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: false,\r\n            showResetPasswordPage: false\r\n        });\r\n    }\r\n\r\n    //handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n    //provider\r\n    handleOAuthLogin = (provider) => {\r\n        window.open(`/auth/${provider}`, \"_self\");\r\n    }\r\n\r\n    //handleOAuthLoginClick -- Called whent the user clicks on button to\r\n    //authenticate via a third-party OAuth service. The name of the provider is\r\n    //passed in as a parameter.\r\n    handleOAuthLoginClick = (provider) => {\r\n        this.setState({\r\n            [provider + \"Icon\"]: \"fa fa-spin fa-spinner\",\r\n            [provider + \"Label\"]: \"Connecting...\"\r\n        });\r\n        setTimeout(() => this.handleOAuthLogin(provider), 1000);\r\n    }\r\n\r\n    //getSecurityAnswer: Given the id, security question, and security answer obtained\r\n    //from the LookUpAccountDialog component, update state such that the user will\r\n    //next be prompted to enter security question and answer for verification\r\n    getSecurityAnswer = (userId, question, answer) => {\r\n        this.resetUserId = userId;\r\n        this.resetQ = question;\r\n        this.resetA = answer;\r\n        this.setState({\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: true\r\n        });\r\n    }\r\n\r\n    //getNewPassword-- Called after user successfully provides correct answer\r\n    //to security question. Presents the \"Reset Password\" dialog box.\r\n    getNewPassword = () => {\r\n        this.setState({\r\n            showSecurityQuestionDialog: false,\r\n            showResetPasswordPage: true\r\n        });\r\n    }\r\n\r\n    //resetPassword--Called after the user successfully enters a new (acceptable)\r\n    //password. pw contains the new password. Call on the Update (PUT) server\r\n    //route to update the user's password in the database.\r\n    resetPassword = async (pw) => {\r\n        const url = \"/users/\" + this.resetUserId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n\r\n            method: 'PUT',\r\n            body: JSON.stringify({ password: pw })\r\n        });\r\n        if (res.status == 200) { //successful update creation!\r\n            this.setState({\r\n                showResetPaswordDialog: false,\r\n                statusMsg: \"Password successfully reset!\"\r\n            });\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.setState({\r\n                showResetPasswordPage: false,\r\n                statusMsg: resText\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //newAccountCreated -- Called after successful creation of a new account\r\n    accountCreateDone = (msg, deleted) => {\r\n        this.setState({\r\n            statusMsg: msg,\r\n            showCreateAccountDialog: false\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\n    closeStatusMsg = () => {\r\n        this.setState({ statusMsg: \"\" });\r\n    }\r\n\r\n    reset = () => {\r\n        this.props.changeMode(AppMode.RESET)\r\n    }\r\n\r\n\r\n    //cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\n    cancelCreateAccount = () => {\r\n        this.setState({ showCreateAccountDialog: false });\r\n    }\r\n\r\n    signUp = () => {\r\n        this.props.changeMode(AppMode.REGISTER);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"osblepage\">\r\n                <center>\r\n                    <div className=\"wrapper\">\r\n                        \r\n                            <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{ position: \"relative\", right: \".7rem\" }}></img>\r\n                            {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                                <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                                    <span className=\"fa fa-times\"></span>\r\n                                </button></div> : null}\r\n                            {this.state.showLookUpAccountDialog ?\r\n                                <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                    getSecurityAnswer={this.getSecurityAnswer} /> : null}\r\n                            {this.state.showSecurityQuestionDialog ?\r\n                                <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                    question={this.resetQ}\r\n                                    answer={this.resetA}\r\n                                    getNewPassword={this.getNewPassword} /> : null}\r\n                            {this.state.showResetPaswordDialog ?\r\n                                <ResetPasswordPage cancelResetPassword={this.cancelResetPassword}\r\n                                    resetPassword={this.resetPassword} /> : null}\r\n                            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n                                <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24, fontWeight: \"500\" }}>\r\n\r\n                                    <input\r\n                                        style={{ backgroundColor: \"white\" }}\r\n                                        ref={this.emailInputRef}\r\n                                        className=\"form-control enterEmail\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        id=\"emailInput\"\r\n                                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                                        required={true}\r\n                                    />\r\n                                </label>\r\n\r\n                                <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24, fontWeight: \"500\" }}>\r\n\r\n                                    <input\r\n                                        ref={this.passwordInputRef}\r\n                                        className=\"form-control enterPassword\"\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        id=\"passwordInput\"\r\n                                        pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                                        required={true}\r\n                                    />\r\n                                </label>\r\n\r\n                                <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\" btn btn-primary btn-block LoginButton\">\r\n                                    <span id=\"login-btn-icon\" className={this.state.loginBtnIcon} />\r\n                &nbsp;{this.state.loginBtnLabel}\r\n                                </button>\r\n                                <br></br>\r\n                                <p>\r\n                                    <button type=\"button\" className=\"btn btn-link login-link\" id=\"createAccountBtn\"\r\n                                        onClick={this.signUp}>\r\n                                        Create an account</button> |\r\n                <button type=\"button\" className=\"btn btn-link login-link\" id=\"resetBtn\"\r\n                                        onClick={this.reset}>\r\n                                        Reset your password</button>\r\n                                </p>\r\n                                <p>\r\n                                    <i>Version developed by CptS 489 students</i>\r\n                                </p>\r\n                            </form>\r\n                            {this.state.showCreateAccountDialog ?\r\n                                <CreateEditAccountDialog\r\n                                    create={true}\r\n                                    done={this.accountCreateDone}\r\n                                    cancel={this.cancelCreateAccount} /> : null}\r\n                            {this.state.showResetPasswordPage ? <ResetPasswordPage /> : null}\r\n                            </div>\r\n                </center>\r\n            </div>\r\n           \r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport AppMode from \"./../AppMode.js\"\r\n\r\nclass RegisterPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.emailRef = React.createRef();\r\n        this.confirm_emailRef = React.createRef();\r\n        this.passwordRef = React.createRef();\r\n        this.confirm_passwordRef = React.createRef();\r\n        this.fnameRef = React.createRef();\r\n        this.confirm_fnameRef = React.createRef();\r\n        this.lnameRef = React.createRef();\r\n        this.confirm_lnameRef = React.createRef(); \r\n        this.IDRef = React.createRef();\r\n        this.confirmIDRef = React.createRef(); \r\n\r\n        this.state = {\r\n            email: \"\",\r\n            confirm_email: \"\",\r\n            password: \"\",\r\n            confirm_password: \"\",\r\n            first_name: \"\",\r\n            last_name: \"\",\r\n            confirm_last_name: \"\",\r\n            confirm_first_name:\"\",\r\n            school: \"\",\r\n            id: 0,\r\n            confirm_id: 0,\r\n            validated: true,\r\n        };\r\n    }\r\n\r\n    createAccount = () =>{\r\n        this.props.changeMode(AppMode.LOGIN);\r\n    }\r\n\r\n    \r\n\r\n    handleRegister = (event) =>{\r\n        event.preventDefault();\r\n         if(this.state.email == this.state.confirm_email &&\r\n            this.state.password == this.state.confirm_password &&\r\n            this.state.first_name == this.state.confirm_first_name &&\r\n            this.state.last_name == this.state.confirm_last_name &&\r\n            this.state.id == this.state.confirm_id){\r\n            this.createAccount();\r\n        }\r\n        \r\n    }\r\n\r\n    handleOnChange = (event) =>{\r\n        if(event.target.name == \"email\"){\r\n            this.setState({email: event.target.value});\r\n        }\r\n\r\n        else if(event.target.name == \"confirm_email\"){\r\n            this.setState({confirm_email: event.target.value});\r\n        }\r\n        else if(event.target.name == \"password\"){\r\n            this.setState({password: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_password\"){\r\n            this.setState({confirm_password: event.target.value});\r\n        }\r\n        else if(event.target.name == \"first_name\"){\r\n            this.setState({first_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"last_name\"){\r\n            this.setState({last_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_last_name\"){\r\n            this.setState({confirm_last_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_first_name\"){\r\n            this.setState({confirm_first_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"school\"){\r\n            this.setState({school: event.target.value});\r\n        }\r\n        else if(event.target.name == \"id\"){\r\n            this.setState({id: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_id\"){\r\n            this.setState({confirm_id: event.target.value});\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"osblepage\">\r\n            <center>\r\n            <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{position:\"relative\",right:\".7rem\"}}></img>\r\n            <p className = \"paragraph\" style={{color: 'white', fontWeight: 'bold'}}>\r\n            Create a New Account &nbsp; <span className=\"fa fa-question-circle\"></span></p> \r\n            <p className= \"paragraph\" style={{color: 'white', fontWeight: 'bold'}}>Login Information</p>\r\n            \r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleRegister}>\r\n            <label className=\"form-label\">\r\n                 Email address  \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"email\"\r\n                 type=\"email\"\r\n                 size=\"35\"\r\n                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                 required={true}\r\n                 ref={this.emailRef}\r\n                onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label className=\"form-label\">\r\n                 Confirm email address  \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_email\"\r\n                 type=\"email\"\r\n                 size=\"35\"\r\n                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                 required={true}\r\n                 ref={this.confirm_emailRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label className=\"form-label\">\r\n                 Password\r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"password\"\r\n                 type=\"password\"\r\n                 id=\"passwordReg\"\r\n                 size=\"35\"\r\n                 pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                 required={true}\r\n                 ref={this.passwordRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm password\r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_password\"\r\n                 type=\"password\"\r\n                 size=\"35\"\r\n                 pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                 required={true}\r\n                 ref={this.confirm_passwordRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <p className = \"paragraph\" style={{color: 'white', fontWeight: 'bold'}}>Identification</p>\r\n            <label  className=\"form-label\">\r\n                 First name \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"first_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.fnameRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Last name \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"last_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.lnameRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm last name \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_last_name\"\r\n                 id=\"confirm_last_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.confirm_lnameRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm first name \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_first_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.confirm_fnameRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <p className = \"paragraph form-label\">School Information</p>\r\n            <p style={{color: 'white'}}>Don't see your school in the list? Request that it be added</p>\r\n            <label  className=\"form-label\">\r\n            <select name=\"school\" style={{width:\"600px\"}}\r\n            className=\"form-control form-center\" onChange={this.handleOnChange}>\r\n            <option value=\"Washington State University\">Washington State University</option>\r\n            <option value=\"University of Washington\">University of Washington</option>\r\n            <option value=\"Western Washington University\">Western Washington University</option>\r\n            <option value=\"Seattle University\">Seattle University</option>\r\n          </select>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Student, Faculty, or Staff ID Number \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text\"\r\n                 name=\"id\"\r\n                 type=\"number\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.IDRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm Student, Faculty, or Staff ID Number \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center formSize\"\r\n                 name=\"confirm_id\"\r\n                 type=\"number\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.confirmIDRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br></br>\r\n            <button className=\"register-btn\" role=\"submit\" type=\"submit\">Register</button>\r\n            </form>\r\n            </div>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default RegisterPage;","import React from 'react';\r\n\r\nclass GradesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Grades</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default GradesPage;","import React from 'react';\r\nclass AssignmentsPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Assignments</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default AssignmentsPage;","import React from 'react';\r\n\r\nclass AnalyticsPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Analytics</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default AnalyticsPage;","import React from 'react';\r\n\r\nclass CourseSettingsPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Course Settings</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CourseSettingsPage;","import React from 'react';\r\n\r\nclass UsersPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Users</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default UsersPage;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport Register from './RegisterPage'\r\nimport ResetPassword from './ResetPasswordPage'\r\nimport Grades from './GradesPage'\r\nimport Assignments from './AssignmentsPage'\r\nimport Analytics from './AnalyticsPage'\r\nimport CourseSettings from './CourseSettingsPage'\r\nimport Users from './UsersPage'\r\n\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Dashboard\";\r\nmodeTitle[AppMode.REGISTER] = \"Register\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\nmodeTitle[AppMode.RESET] = \"Reset Password\";\r\nmodeTitle[AppMode.GRADES] = \"Grades\";\r\nmodeTitle[AppMode.USERS] = \"Users\";\r\nmodeTitle[AppMode.ANALYTICS] = \"Analytics\";\r\nmodeTitle[AppMode.ASSIGNMENTS] = \"Assignments\";\r\nmodeTitle[AppMode.COURSE_SETTINGS] = \"Course Settings\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.REGISTER] = Register;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.RESET] = ResetPassword;\r\nmodeToPage[AppMode.GRADES] = Grades;\r\nmodeToPage[AppMode.USERS] = Users;\r\nmodeToPage[AppMode.ANALYTICS] = Analytics;\r\nmodeToPage[AppMode.ASSIGNMENTS] = Assignments;\r\nmodeToPage[AppMode.COURSE_SETTINGS] = CourseSettings;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {/* {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null} */}\r\n        {this.state.mode == AppMode.LOGIN || this.state.mode == AppMode.REGISTER ? null:<NavBar \r\n          dashboard={modeTitle[this.state.mode]}\r\n          grades={modeTitle[AppMode.GRADES]} \r\n          assignments={modeTitle[AppMode.ASSIGNMENTS]}\r\n          users={modeTitle[AppMode.USERS]}\r\n          analytics={modeTitle[AppMode.ANALYTICS]}\r\n          settings={modeTitle[AppMode.COURSE_SETTINGS]}   \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>}\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          {/* <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/> */}\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}