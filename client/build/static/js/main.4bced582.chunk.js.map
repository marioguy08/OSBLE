{"version":3,"sources":["AppMode.js","components/Dropdown.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/RegisterPage.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordPage.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPostReply.js","components/FeedPostItem.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/GradeTable.js","components/GradesPage.js","components/Assignment.js","components/AssignmentProf.js","components/SubmissionModal.js","components/AssignmentsPage.js","components/AnalyticsPage.js","components/CourseSettingsPage.js","components/UsersList.js","components/UsersPage.js","components/HelpPage.js","components/MailTable.js","components/MailPage.js","components/ProfilePage.js","components/DeleteCoursePage.js","components/Course.js","components/FindCoursePage.js","components/UserSettingsPage.js","components/Admin.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","ADMIN","LOGIN","HELP","MAIL","PROFILE","RESET","ASSIGNMENTS","GRADES","USER_SETTINGS","COURSE_SETTINGS","CREATE_COURSE","DELETE_COURSE","FIND_COURSE","ANALYTICS","USERS","REGISTER","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","Dropdown","props","logOut","changeMode","className","role","style","width","this","displayMenu","type","href","onClick","React","Component","NavBar","toggleShowDropdown","newType","setState","prevState","setType","switchMode","newMode","courseManagement","createCourse","renderStudentMode","mode","dashboard","assignments","grades","renderInstructorMode","id","userObj","is_instructor","is_admin","togglecoursedropdown","prevstate","coursedropdown","userdropdown","extend","toggleuserdropdown","state","gotopage","string","handleSelectedCourse","r","updateSelectedCourse","Enrolledcourses","_id","renderCourse","table","push","key","coursewidth","current","offsetWidth","borderRadius","course_name","length","renderRightItems","ref","selectedCourse","namewidth","first_name","last_name","display","flexDirection","top","marginLeft","renderDropdown","createRef","padding","src","alt","height","SideMenu","renderModeMenuItems","menuOpen","toggleMenuOpen","profilePicURL","displayName","localAccount","editAccount","showAbout","RegisterPage","createAccount","event","a","userData","userid","email","password","school","url","fetch","headers","method","body","JSON","stringify","res","console","log","status","text","handleRegister","preventDefault","confirm_email","confirm_password","confirm_first_name","confirm_last_name","confirm_id","handleOnChange","target","name","value","emailRef","confirm_emailRef","passwordRef","confirm_passwordRef","fnameRef","confirm_fnameRef","lnameRef","confirm_lnameRef","IDRef","confirmIDRef","validated","position","right","color","fontWeight","onSubmit","autocomplete","size","pattern","required","onChange","ResetPasswordPage","handleSubmit","resetPasswordRef","resetPasswordRepeatRef","resetPassword","focus","errorMsg","checkForSubmit","e","code","cancelResetPassword","placeholder","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","json","obj","parse","authStrategy","getSecurityAnswer","securityQuestion","securityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","rows","cols","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","resText","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPasswordPage","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","userId","pw","showResetPaswordDialog","deleted","closeStatusMsg","reset","signUp","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","fontSize","backgroundColor","FeedpostReply","boxShadow","margin","createdby","content","FeedpostItem","showReply","addreply","newpost","_inputElement","Date","now","replies","concat","seeReplies","createntries","entry","post_content","JSXreplies","map","marginBottom","listStyleType","FeedPage","addpost","isanonymous","updateEntries","refreshOnUpdate","toggledropdown","showdropdown","changeselected","newfilter","curselected","setanonymous","postid","posts","getEntries","componentDidMount","componentDidUpdate","prevProps","JSONposts","JSXposts","float","marginTop","ConfirmDeleteRound","close","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","confirmDelete","setDeleteId","renderTable","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","fontStyle","RoundForm","handleChange","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","maxLength","max","disabled","FloatingButton","handleClick","Rounds","addRound","newData","editId","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","GradeTable","getKeys","data","getHeader","headerRow","i","assignment_name","getRowsData","row","grade","GradesPage","userGrades","j","hasGradebook","isstudent","class","data-toggle","data-target","Assignment","assignmentid","borderBottom","assignment","duedate","didsubmit","showModal","latestactivity","AssignmentProf","showSubmissions","newgrade","SubmissionModal","currentgrades","getGrades","updateGrade","oldgrade","submit_date","submission_content","then","defaultValue","JSXgrades","paddingLeft","AssignmentsPage","curassignmentid","createAssignment","curClass","newGrades","assignmentName","assignmentText","assignmentDue","student","studentarray","students","assignmentData","assignment_content","instructor_id","due_date","toggleCreate","getAssignments","JSXassignments","AnalyticsPage","CourseSettingsPage","updateCourse","course_number","loadCourses","cancelReturnHomepage","prefix","term","year","start_date","end_date","instructor","autoComplete","UsersList","editUser","deleteUser","UsersPage","getUserLists","roles","classData","index","courseId","bind","HelpPage","senderId","subject","RenderRow","MailPage","inbox","recId","message","outbox","ProfilePage","switchToEdit","stype","DeleteCoursePage","deleteCourse","alert","cancelDeleteCourse","Course","coursename","coursenumber","semester","FindCoursePage","loadCourse","courses","JSXcourses","UserSettingsPage","accept","Admin","loadUsers","users","changeRoleCallBack","updateUser","changeRole","String","modeTitle","modeToPage","Administrator","Register","ResetPassword","Grades","Users","Analytics","Assignments","CourseSettings","Help","Mail","Profile","DeleteCourse","FindCourse","UserSettings","App","obj2","arg","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","isAuthenticated","user","ModePage","create","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bced582.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\n\r\nconst AppMode = {\r\n    ADMIN: \"AdminMode\",\r\n    LOGIN: \"LoginMode\",\r\n    HELP: \"HelpMode\", \r\n    MAIL: \"MailMode\", \r\n    PROFILE: \"ProfileMode\",\r\n    RESET: \"ResetMode\",\r\n    ASSIGNMENTS: \"AssignmentsMode\",\r\n    GRADES: \"GradesMode\",\r\n    USER_SETTINGS: \"UserSettingsMode\",\r\n    COURSE_SETTINGS : \"CourseSettingsMode\",\r\n    CREATE_COURSE: \"CreateCourseMode\", \r\n    DELETE_COURSE: \"DeleteCourseMode\", \r\n    FIND_COURSE: \"FindCourseMode\",\r\n    ANALYTICS: \"AnalyticsMode\",\r\n    USERS: \"UsersMode\",\r\n    REGISTER : \"RegisterMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport '../styles/Dropdown.css';\r\n\r\nclass Dropdown extends React.Component {\r\nconstructor(props){\r\n super(props);\r\n\r\n};\r\n\r\n\r\nlogOut = () =>{\r\n  this.props.changeMode(AppMode.LOGIN);\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div  className=\"modal-dropdown\" role=\"dialog\" style = {{width:\"200px\"}} >\r\n\r\n          { this.props.displayMenu ?  this.props.type == \"profile\" ? (\r\n        <ul className = \"maindropdown\">\r\n         <li className = \"dropitem\"><a className=\"active\" href=\"#View Profile\" onClick={() =>this.props.changeMode(AppMode.MAIL)}>Mail(0)</a></li>\r\n         <li className = \"dropitem\"><a href=\"#Settings\" onClick={() =>this.props.changeMode(AppMode.PROFILE)}>View Profile</a></li>\r\n         <li className = \"dropitem\"><a href=\"#Settings\" onClick={() =>this.props.changeMode(AppMode.USER_SETTINGS)}>Settings</a></li>\r\n         <li className = \"dropitem\" onClick={this.logOut}><a href=\"#Log Out\">Log Out </a></li>\r\n          </ul>\r\n        ):\r\n        (\r\n          <ul className = \"maindropdown\">\r\n           <li className = \"dropitem\"><a className=\"active\" href=\"#Create Page\" onClick={() =>this.props.changeMode(AppMode.FIND_COURSE)}>Find Course</a></li>\r\n           <li className = \"dropitem\"><a href=\"#Create Course\" onClick={() =>this.props.changeMode(AppMode.COURSE_SETTINGS)}>Create Course</a></li>\r\n           <li className = \"dropitem\"><a href=\"#Delete Course\" onClick={() =>this.props.changeMode(AppMode.DELETE_COURSE)}>Delete Course </a></li>\r\n            </ul>\r\n          )\r\n        :\r\n        (\r\n          null\r\n        )\r\n        }\r\n\r\n       </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport Dropdown from './Dropdown'\r\nimport '../styles/Navbar.css';\r\nclass NavBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.namewidth = React.createRef()\r\n    this.coursewidth = React.createRef()\r\n    this.state = {\r\n      displayMenu: false,\r\n      type: \"\",\r\n      coursedropdown: false,\r\n      userdropdown: false,\r\n      extend: false\r\n    };\r\n\r\n  }\r\n\r\n\r\n  toggleShowDropdown = (newType) => {\r\n    this.setState(prevState => ({ displayMenu: !prevState.displayMenu }));\r\n    this.setType(newType);\r\n  }\r\n\r\n  switchMode = (newMode) => {\r\n    this.props.changeMode(newMode);\r\n  }\r\n\r\n  courseManagement = (newMode) =>{\r\n    this.props.createCourse(false);\r\n    this.props.changeMode(newMode);\r\n  }\r\n\r\n  setType = (newType) => {\r\n    this.setState({ type: newType });\r\n  }\r\n\r\n  renderStudentMode = () => {\r\n    return (\r\n      <div>\r\n        <span>&nbsp;&nbsp;&nbsp;</span>\r\n        <span className={this.props.mode == AppMode.FEED ? \"navbar-title item-selected\" : \"navbar-title\"} onClick={() => this.switchMode(AppMode.FEED)}>\r\n          &nbsp;{this.props.dashboard}&nbsp;\r\n      </span>\r\n        <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n        <span className={this.props.mode == AppMode.ASSIGNMENTS ? \"navbar-title item-selected\" : \"navbar-title\"} onClick={() => this.switchMode(AppMode.ASSIGNMENTS)}>\r\n          &nbsp;{this.props.assignments}&nbsp;\r\n      </span>\r\n        <span>&nbsp;&nbsp;&nbsp;</span>\r\n\r\n        <span className={this.props.mode == AppMode.GRADES ? \"navbar-title item-selected\" : \"navbar-title\"} onClick={() => this.switchMode(AppMode.GRADES)}>\r\n          &nbsp;{this.props.grades}&nbsp;\r\n      </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderInstructorMode = () => {\r\n    return (\r\n      <div>\r\n        &nbsp;&nbsp;&nbsp;\r\n        <button className={this.props.mode == AppMode.FEED ? \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} \r\n        id=\"NavBarFeed\" onClick={() => this.switchMode(AppMode.FEED)}>Dashboard</button>\r\n\r\n        <button className={this.props.mode == AppMode.ASSIGNMENTS ? \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} \r\n        id=\"NavBarAssignments\" onClick={() => this.switchMode(AppMode.ASSIGNMENTS)}>Assignments</button>\r\n        \r\n        <button className={this.props.mode == AppMode.GRADES ? \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} \r\n        id=\"NavBarGrades\" onClick={() => this.switchMode(AppMode.GRADES)}>Grades</button>\r\n        \r\n        {this.props.userObj.is_instructor || this.props.userObj.is_admin ? <button className={this.props.mode == AppMode.USERS ?\r\n           \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} id=\"NavBarUsers\" \r\n           onClick={() => this.switchMode(AppMode.USERS)}>Users</button>: null}\r\n        \r\n        {this.props.userObj.is_instructor || this.props.userObj.is_admin ?<button className={this.props.mode == AppMode.COURSE_SETTINGS ?\r\n           \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} \r\n           id=\"NavBarCourseSettings\" onClick={() => this.courseManagement(AppMode.COURSE_SETTINGS)}>Course Settings</button>: null}\r\n        \r\n        {this.props.userObj.is_instructor || this.props.userObj.is_admin ?<button className={this.props.mode == AppMode.ANALYTICS ?\r\n           \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} id=\"NavBarAnalytics\" \r\n           onClick={() => this.switchMode(AppMode.ANALYTICS)}>Analytics</button>: null}\r\n        \r\n        { this.props.userObj.is_admin == true ?<button className={this.props.mode == AppMode.ADMIN ? \"btn btn-primary navbutton selected\" : \"btn btn-primary navbutton\"} id=\"NavBarAnalytics\" onClick={() => this.switchMode(AppMode.ADMIN)}>Administrator</button> : null}\r\n\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n  togglecoursedropdown = () => {\r\n    this.setState(prevstate => ({ coursedropdown: !prevstate.coursedropdown, userdropdown: false, extend: false }));\r\n  }\r\n  toggleuserdropdown = () => {\r\n    if (this.state.coursedropdown === true) {\r\n      this.setState({\r\n        extend: true\r\n      })\r\n      this.setState(prevstate => ({ userdropdown: !prevstate.userdropdown, coursedropdown: false }));\r\n    } else {\r\n      this.setState(prevstate => ({ userdropdown: !prevstate.userdropdown, coursedropdown: false, extend: false }));\r\n    }\r\n\r\n  }\r\n  gotopage = (string) => {\r\n    if (string == \"deletecourse\") {\r\n      this.props.changeMode(AppMode.DELETE_COURSE);\r\n    }\r\n    else if (string == \"findcourse\") {\r\n      this.props.changeMode(AppMode.FIND_COURSE);\r\n    }\r\n    else if (string == \"mail\") {\r\n      this.props.changeMode(AppMode.MAIL);\r\n    }\r\n    else if (string == \"profile\") {\r\n      this.props.changeMode(AppMode.PROFILE);\r\n    }\r\n    else if (string == \"settings\") {\r\n      this.props.changeMode(AppMode.USER_SETTINGS);\r\n    }\r\n    else if (string == \"logout\") {\r\n      this.props.changeMode(AppMode.LOGIN);\r\n    }\r\n    else if (string == \"createcourse\") {\r\n      this.props.createCourse(true)\r\n      this.props.changeMode(AppMode.COURSE_SETTINGS);\r\n    }\r\n\r\n    this.setState({\r\n      coursedropdown: false,\r\n      userdropdown: false\r\n    });\r\n  }\r\n\r\n  handleSelectedCourse = (r) =>{\r\n    this.props.updateSelectedCourse(this.props.Enrolledcourses[r]._id)\r\n    this.setState({coursedropdown:false});\r\n\r\n  }\r\n  renderCourse = () => {\r\n    let table = [];\r\n    for (let r = 0; r < this.props.Enrolledcourses.length; ++r) {\r\n      table.push(\r\n        <tr key={r}>\r\n          <td><button className=\"btn btn-primary navdropdown\" style={{ width: this.coursewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} \r\n          onClick={() => this.handleSelectedCourse(r)}>{this.props.Enrolledcourses[r].course_name}</button></td>\r\n        </tr> \r\n      );\r\n    }\r\n   \r\n    return table;\r\n    }\r\n\r\n  renderRightItems = () => {\r\n   \r\n    return (\r\n\r\n      <div>\r\n        <button className=\"btn btn-primary navbutton\" ref={this.coursewidth} onClick={this.togglecoursedropdown}>{this.props.selectedCourse === null ? \"Not enrolled in any courses\" : this.props.selectedCourse.course_name}\r\n        &nbsp;\r\n        <span className={this.state.coursedropdown == true ? \"navbar-title fa fa-angle-left\" : \"navbar-title fa fa-angle-down\"}></span>\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary navbutton\" id=\"profile\" ref={this.namewidth} onClick={this.toggleuserdropdown}>{this.props.userObj.first_name} {this.props.userObj.last_name}\r\n        &nbsp;\r\n        <span className={this.state.userdropdown == true ? \"navbar-title fa fa-angle-left\" : \"navbar-title fa fa-angle-down\"}></span></button>\r\n        <button className=\"btn btn-primary navbutton\" onClick={() => this.switchMode(AppMode.MAIL)}>Mail</button>\r\n        <button className=\"btn btn-primary navbutton\" id=\"viewHelp\" onClick={() => this.switchMode(AppMode.HELP)}>Help</button>\r\n\r\n        {this.state.coursedropdown ?\r\n          <div style={{ display: \"flex\", flexDirection: \"column\", top: \"61px\" }} className=\"mydropdownnav\">\r\n            {this.props.Enrolledcourses.length > 0 ? this.renderCourse():null}\r\n            <button className=\"btn btn-primary navdropdown\" style={{ width: this.coursewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={() => this.gotopage(\"findcourse\")} >Find Course</button>\r\n            <button className=\"btn btn-primary navdropdown\" style={{ width: this.coursewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={this.props.userObj.is_instructor? () => this.gotopage(\"createcourse\"): null}>Create Course</button>\r\n            <button className=\"btn btn-primary navdropdown\" style={{ width: this.coursewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={() => this.gotopage(\"deletecourse\")}>Delete Course</button>\r\n          </div>\r\n          :\r\n          null\r\n        }\r\n\r\n        {this.state.userdropdown ?\r\n          <div style={this.state.extend ? { display: \"flex\", flexDirection: \"column\", top: \"61px\", marginLeft: this.coursewidth.current.offsetWidth + 6 + \"px\" } : { display: \"flex\", flexDirection: \"column\", top: \"61px\", marginLeft: this.coursewidth.current.offsetWidth + \"px\" }} className=\"mydropdownnav\">\r\n            <button className=\"btn btn-primary navdropdown\" id=\"viewMail\" style={{ width: this.namewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={() => this.gotopage(\"mail\")}>Mail</button>\r\n            <button className=\"btn btn-primary navdropdown\" id=\"viewProfile\" style={{ width: this.namewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={() => this.gotopage(\"profile\")}>Profile</button>\r\n            <button className=\"btn btn-primary navdropdown\" id=\"viewSettings\" style={{ width: this.namewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={() => this.gotopage(\"settings\")}>Settings</button>\r\n            <button className=\"btn btn-primary navdropdown\" id=\"logoutButton\" style={{ width: this.namewidth.current.offsetWidth - 5, borderRadius: \"0px\" }} onClick={() => this.gotopage(\"logout\")}>Log Out</button>\r\n          </div>\r\n          :\r\n          null\r\n        }\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n  renderDropdown = () => {\r\n    return (<Dropdown />);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ padding: \"5px\" }}>\r\n        <div className=\"navbar\">\r\n          <span className=\"navbar-items\">\r\n            <img src=\"osble3.png\" alt=\"osble Logo\" height=\"50px\" onClick={() => this.switchMode(AppMode.FEED)} width=\"100px\" className=\"navbar-items\" />\r\n            {/* {this.renderStudentMode()} */}\r\n            {this.renderInstructorMode()}\r\n          </span>\r\n          <span className=\"navbar-items-right\">\r\n            {this.renderRightItems()}\r\n          </span>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ||  this.props.mode === AppMode.REGISTER? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED  || this.props.mode === AppMode.REGISTER? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\nimport AppMode from \"./../AppMode.js\"\r\n\r\nclass RegisterPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.emailRef = React.createRef();\r\n        this.confirm_emailRef = React.createRef();\r\n        this.passwordRef = React.createRef();\r\n        this.confirm_passwordRef = React.createRef();\r\n        this.fnameRef = React.createRef();\r\n        this.confirm_fnameRef = React.createRef();\r\n        this.lnameRef = React.createRef();\r\n        this.confirm_lnameRef = React.createRef();\r\n        this.IDRef = React.createRef();\r\n        this.confirmIDRef = React.createRef();\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            confirm_email: \"\",\r\n            password: \"\",\r\n            confirm_password: \"\",\r\n            first_name: \"\",\r\n            last_name: \"\",\r\n            confirm_last_name: \"\",\r\n            confirm_first_name: \"\",\r\n            school: \"Washington State University\",\r\n            id: 0,\r\n            confirm_id: 0,\r\n            validated: true,\r\n        };\r\n    }\r\n\r\n    createAccount = async (event) => {\r\n        let userData = {\r\n            userid: this.state.id,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            first_name: this.state.first_name,\r\n            last_name: this.state.last_name,\r\n            school: this.state.school,\r\n            is_instructor: false,\r\n            is_admin: this.state.id == 101 ||this.state.id == 102 || this.state.id == 103 ? true : false,\r\n        }\r\n        const url = '/users/' + this.state.id; \r\n        let res;\r\n        res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(userData)\r\n        });\r\n        console.log(res.status);\r\n        if (res.status == 201) { //successful account creation!\r\n            this.props.changeMode(AppMode.LOGIN);\r\n            //this.props.done(\"New account created! Enter credentials to log in.\", false);\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            //this.props.done(resText, false);\r\n        }\r\n\r\n        //this.props.changeMode(AppMode.LOGIN);\r\n    }\r\n    \r\n    handleRegister = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.email == this.state.confirm_email &&\r\n            this.state.password == this.state.confirm_password &&\r\n            this.state.first_name == this.state.confirm_first_name &&\r\n            this.state.last_name == this.state.confirm_last_name &&\r\n            this.state.id == this.state.confirm_id) {\r\n            this.createAccount();\r\n        }\r\n\r\n    }\r\n\r\n    handleOnChange = (event) => {\r\n        if (event.target.name == \"email\") {\r\n            this.setState({ email: event.target.value });\r\n        }\r\n\r\n        else if (event.target.name == \"confirm_email\") {\r\n            this.setState({ confirm_email: event.target.value });\r\n        }\r\n        else if (event.target.name == \"password\") {\r\n            this.setState({ password: event.target.value });\r\n        }\r\n        else if (event.target.name == \"confirm_password\") {\r\n            this.setState({ confirm_password: event.target.value });\r\n        }\r\n        else if (event.target.name == \"first_name\") {\r\n            this.setState({ first_name: event.target.value });\r\n        }\r\n        else if (event.target.name == \"last_name\") {\r\n            this.setState({ last_name: event.target.value });\r\n        }\r\n        else if (event.target.name == \"confirm_last_name\") {\r\n            this.setState({ confirm_last_name: event.target.value });\r\n        }\r\n        else if (event.target.name == \"confirm_first_name\") {\r\n            this.setState({ confirm_first_name: event.target.value });\r\n        }\r\n        else if (event.target.name == \"school\") {\r\n            this.setState({ school: event.target.value });\r\n        }\r\n        else if (event.target.name == \"id\") {\r\n            this.setState({ id: event.target.value });\r\n        }\r\n        else if (event.target.name == \"confirm_id\") {\r\n            this.setState({ confirm_id: event.target.value });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"osblepage\">\r\n                <center>\r\n                    <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{ position: \"relative\", right: \".7rem\" }}></img>\r\n                    <p className=\"paragraph\" style={{ color: 'white', fontWeight: 'bold' }}>\r\n                        Create a New Account &nbsp; <span className=\"fa fa-question-circle\"></span></p>\r\n                    <p className=\"paragraph\" style={{ color: 'white', fontWeight: 'bold' }}>Login Information</p>\r\n\r\n                    <div className=\"modal-body\">\r\n                        <form onSubmit={this.handleRegister}>\r\n                            <label className=\"form-label\">\r\n                                Email address\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    size=\"35\"\r\n                                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                                    required={true}\r\n                                    ref={this.emailRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Confirm email address\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"confirm_email\"\r\n                                    type=\"email\"\r\n                                    size=\"35\"\r\n                                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                                    required={true}\r\n                                    ref={this.confirm_emailRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Password\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    id=\"passwordReg\"\r\n                                    size=\"35\"\r\n                                    pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                                    required={true}\r\n                                    ref={this.passwordRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Confirm password\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"confirm_password\"\r\n                                    type=\"password\"\r\n                                    size=\"35\"\r\n                                    pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                                    required={true}\r\n                                    ref={this.confirm_passwordRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <p className=\"paragraph\" style={{ color: 'white', fontWeight: 'bold' }}>Identification</p>\r\n                            <label className=\"form-label\">\r\n                                First name\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"first_name\"\r\n                                    type=\"text\"\r\n                                    size=\"35\"\r\n                                    required={true}\r\n                                    ref={this.fnameRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Last name\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"last_name\"\r\n                                    type=\"text\"\r\n                                    size=\"35\"\r\n                                    required={true}\r\n                                    ref={this.lnameRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Confirm last name\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"confirm_last_name\"\r\n                                    id=\"confirm_last_name\"\r\n                                    type=\"text\"\r\n                                    size=\"35\"\r\n                                    required={true}\r\n                                    ref={this.confirm_lnameRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Confirm first name\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text form-center\"\r\n                                    name=\"confirm_first_name\"\r\n                                    type=\"text\"\r\n                                    size=\"35\"\r\n                                    required={true}\r\n                                    ref={this.confirm_fnameRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <p className=\"paragraph form-label\">School Information</p>\r\n                            <p style={{ color: 'white' }}>Don't see your school in the list? Request that it be added</p>\r\n                            <label className=\"form-label\">\r\n                                <select name=\"school\" style={{ width: \"600px\" }}\r\n                                    className=\"form-control form-center\" onChange={this.handleOnChange}>\r\n                                    <option value=\"Washington State University\">Washington State University</option>\r\n                                    <option value=\"University of Washington\">University of Washington</option>\r\n                                    <option value=\"Western Washington University\">Western Washington University</option>\r\n                                    <option value=\"Seattle University\">Seattle University</option>\r\n                                </select>\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Student, Faculty, or Staff ID Number\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text\"\r\n                                    name=\"id\"\r\n                                    type=\"number\"\r\n                                    size=\"35\"\r\n                                    required={true}\r\n                                    ref={this.IDRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br />\r\n                            <label className=\"form-label\">\r\n                                Confirm Student, Faculty, or Staff ID Number\r\n                 <input style={{ width: \"600px\" }}\r\n                                    autocomplete=\"off\"\r\n                                    className=\"form-control form-text\"\r\n                                    name=\"confirm_id\"\r\n                                    type=\"number\"\r\n                                    size=\"35\"\r\n                                    required={true}\r\n                                    ref={this.confirmIDRef}\r\n                                    onChange={this.handleOnChange} />\r\n                            </label>\r\n                            <br></br>\r\n                            <button className=\"register-btn\" role=\"submit\" type=\"submit\">Register</button>\r\n                        </form>\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n//     render() {\r\n//     return (  \r\n//     <div className=\"modal\" role=\"dialog\">\r\n//     <div className=\"modal-dialog modal-lg\"></div>\r\n//         <div className=\"modal-content form-center\">\r\n//             <div className=\"modal-header\">\r\n//               <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n//               <button className=\"modal-close\" \r\n//                        onClick={this.props.cancel}>\r\n//                 &times;</button>\r\n//             </div>\r\n//             <div className=\"modal-body\">\r\n//             <form onSubmit={this.handleSubmit}>\r\n//             <label>\r\n//                 Email: \r\n//                 <input  \r\n//                 autocomplete=\"off\"\r\n//                 disabled={!this.props.create}\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"accountName\"\r\n//                 type=\"email\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Enter Email Address\"\r\n//                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n//                 required={true}\r\n//                 ref={this.newUserRef}\r\n//                 value={this.state.accountName}\r\n//                 onChange={this.handleChange}\r\n//                 onBlur={this.setDefaultDisplayName}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Password:\r\n//                 <input\r\n//                 autocomplete=\"off\"\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"password\"\r\n//                 type=\"password\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Enter Password\"\r\n//                 pattern=\r\n//                 \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n//                 required={true}\r\n//                 value={this.state.password}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Repeat Password:\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"passwordRepeat\"\r\n//                 type=\"password\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Repeat Password\"\r\n//                 required={true}\r\n//                 ref={this.repeatPassRef}\r\n//                 value={this.state.passwordRepeat}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Display Name:\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"displayName\"\r\n//                 type=\"text\"\r\n//                 size=\"30\"\r\n//                 placeholder=\"Display Name\"\r\n//                 required={true}\r\n//                 value={this.state.displayName}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Profile Picture:<br/>\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"profilePic\"\r\n//                 type=\"file\"\r\n//                 accept=\"image/x-png,image/gif,image/jpeg\" \r\n//                 ref={this.profilePicRef}\r\n//                 value={this.state.profilePic}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//                 <img src={this.state.profilePicURL != \"\" ? \r\n//                             this.state.profilePicURL :\r\n//                             this.state.profilePicDataURL} \r\n//                         height=\"60\" width=\"60\" \r\n//                  />\r\n//             </label> \r\n//             <br/>\r\n//             <label>\r\n//                 Security Question:\r\n//                 <textarea\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"securityQuestion\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Security Question\"\r\n//                 rows=\"2\"\r\n//                 cols=\"35\"\r\n//                 maxLength=\"100\"\r\n//                 required={true}\r\n//                 value={this.state.securityQuestion}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Answer to Security Question:\r\n//                 <textarea\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"securityAnswer\"\r\n//                 type=\"text\"\r\n//                 placeholder=\"Answer\"\r\n//                 rows=\"2\"\r\n//                 cols=\"35\"\r\n//                 maxLength=\"100\"\r\n//                 required={true}\r\n//                 value={this.state.securityAnswer}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             {!this.props.create ?  \r\n//             <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n//                 Delete Account...\r\n//             </button> : null}\r\n//             <br/><br/>\r\n//             <button role=\"submit\" \r\n//                 disabled={!this.state.formUpdated}\r\n//                 className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n//                 <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n//                 &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n//             </button>\r\n//             </form>\r\n//             </div>\r\n//         </div>\r\n//         {this.state.confirmDelete ? \r\n//           <ConfirmDeleteAccount email={this.state.accountName}\r\n//                                 deleteAccount={this.deleteAccount}\r\n//                                 close={() => (this.setState({confirmDelete: false}))}\r\n//          /> : null}\r\n//     </div>\r\n//     );\r\n// }\r\n\r\n\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\nimport AppMode from \"../AppMode.js\"\r\n\r\nclass ResetPasswordPage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"osblepage\">\r\n                <center>\r\n                    <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{position:\"relative\",right:\".7rem\"}}></img>\r\n                </center>\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                            </h3>\r\n                            <button className=\"modal-close\" \r\n                                onClick={this.props.cancelResetPassword}>\r\n                                &times;\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                            <form onSubmit={this.handleSubmit}>\r\n                            <label>\r\n                                New Password: \r\n                                <input\r\n                                type=\"password\"\r\n                                placeholder=\"Enter new password\"\r\n                                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                                className=\"form-control form-text\"\r\n                                ref={this.resetPasswordRef}\r\n                                />\r\n                            </label>\r\n                            <br></br>\r\n                            <label>\r\n                                Repeat New Password: \r\n                                <input\r\n                                type=\"password\"\r\n                                id=\"repeatPassword\"\r\n                                placeholder=\"Repeat new password\"\r\n                                className=\"form-control form-text\"\r\n                                onKeyUp={this.checkForSubmit}\r\n                                ref={this.resetPasswordRepeatRef}\r\n                                />\r\n                            </label>\r\n                            <br></br>\r\n                            <button role=\"submit\" \r\n                            className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                                <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                            </button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordPage;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport RegisterPage from './RegisterPage.js';\r\nimport ResetPasswordPage from './ResetPasswordPage.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport './LoginPage.css';\r\nimport AppMode from '../AppMode.js';\r\nimport { async } from 'regenerator-runtime';\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.emailInputRef = React.createRef();\r\n        this.resetUserId = \"\";\r\n        this.resetQ = \"\";\r\n        this.resetA = \"\";\r\n        this.passwordInputRef = React.createRef();\r\n        this.state = {\r\n            showCreateAccountDialog: false,\r\n            statusMsg: \"\",\r\n            loginBtnIcon: \"fa fa-sign-in\",\r\n            loginBtnLabel: \"Log In\",\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: false,\r\n            showResetPasswordPage: false,\r\n            githubIcon: \"fa fa-github\",\r\n            githubLabel: \"Sign in with GitHub\",\r\n            loginMsg: \"\",\r\n            newAccountCreated: false\r\n        };\r\n    }\r\n\r\n    //Focus cursor in email input field when mounted\r\n    componentDidMount() {\r\n        this.emailInputRef.current.focus();\r\n    }\r\n\r\n    //handleLoginSubmit -- Called when user clicks on login button.\r\n    handleLoginSubmit = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n            loginBtnLabel: \"\"\r\n        });\r\n\r\n        //this.props.changeMode(AppMode.FEED);\r\n        const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n            \"&password=\" + this.passwordInputRef.current.value;\r\n        const res = await fetch(url, { method: 'POST' });\r\n        if (res.status == 200) { //successful login!\r\n            // if(this.props.userObj.userid == \"101\")\r\n            // {\r\n                \r\n            //     await this.setAdmin()\r\n            // }\r\n            window.open(\"/\", \"_self\");\r\n        } else { //Unsuccessful login\r\n            const resText = await res.text();\r\n            this.setState({\r\n                loginBtnIcon: \"fa fa-sign-in\",\r\n                loginBtnLabel: \"Log In\",\r\n                statusMsg: resText\r\n            });\r\n        }\r\n    }\r\n\r\n    //accountCreateDone -- Called by child CreateAccountDialog component when \r\n    //user attempted to create new account. Hide the dialog and display \r\n    //a message indicating result of the attempt.\r\n    accountCreateDone = (msg) => {\r\n        this.setState({\r\n            statusMsg: msg,\r\n            showCreateAccountDialog: false\r\n        });\r\n    }\r\n\r\n    //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n    //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n    cancelCreateAccount = () => {\r\n        this.setState({ showCreateAccountDialog: false });\r\n    }\r\n\r\n    //cancelResetPassword -- Called by one of the child three child dialog box components when\r\n    //the user decides to cancel resetting their password. Toggles state so that all three\r\n    //of the dialog boxes are hidden\r\n    cancelResetPassword = () => {\r\n        this.resetUserId = \"\";\r\n        this.resetQ = \"\";\r\n        this.resetA = \"\";\r\n        this.setState({\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: false,\r\n            showResetPasswordPage: false\r\n        });\r\n    }\r\n\r\n    //handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n    //provider\r\n    handleOAuthLogin = (provider) => {\r\n        window.open(`/auth/${provider}`, \"_self\");\r\n    }\r\n\r\n    //handleOAuthLoginClick -- Called whent the user clicks on button to\r\n    //authenticate via a third-party OAuth service. The name of the provider is\r\n    //passed in as a parameter.\r\n    handleOAuthLoginClick = (provider) => {\r\n        this.setState({\r\n            [provider + \"Icon\"]: \"fa fa-spin fa-spinner\",\r\n            [provider + \"Label\"]: \"Connecting...\"\r\n        });\r\n        setTimeout(() => this.handleOAuthLogin(provider), 1000);\r\n    }\r\n\r\n    //getSecurityAnswer: Given the id, security question, and security answer obtained\r\n    //from the LookUpAccountDialog component, update state such that the user will\r\n    //next be prompted to enter security question and answer for verification\r\n    getSecurityAnswer = (userId, question, answer) => {\r\n        this.resetUserId = userId;\r\n        this.resetQ = question;\r\n        this.resetA = answer;\r\n        this.setState({\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: true\r\n        });\r\n    }\r\n\r\n    //getNewPassword-- Called after user successfully provides correct answer\r\n    //to security question. Presents the \"Reset Password\" dialog box.\r\n    getNewPassword = () => {\r\n        this.setState({\r\n            showSecurityQuestionDialog: false,\r\n            showResetPasswordPage: true\r\n        });\r\n    }\r\n\r\n    //resetPassword--Called after the user successfully enters a new (acceptable)\r\n    //password. pw contains the new password. Call on the Update (PUT) server\r\n    //route to update the user's password in the database.\r\n    resetPassword = async (pw) => {\r\n        const url = \"/users/\" + this.resetUserId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n\r\n            method: 'PUT',\r\n            body: JSON.stringify({ password: pw })\r\n        });\r\n        if (res.status == 200) { //successful update creation!\r\n            this.setState({\r\n                showResetPaswordDialog: false,\r\n                statusMsg: \"Password successfully reset!\"\r\n            });\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.setState({\r\n                showResetPasswordPage: false,\r\n                statusMsg: resText\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //newAccountCreated -- Called after successful creation of a new account\r\n    accountCreateDone = (msg, deleted) => {\r\n        this.setState({\r\n            statusMsg: msg,\r\n            showCreateAccountDialog: false\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\n    closeStatusMsg = () => {\r\n        this.setState({ statusMsg: \"\" });\r\n    }\r\n\r\n    reset = () => {\r\n        this.props.changeMode(AppMode.RESET)\r\n    }\r\n\r\n\r\n    //cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\n    cancelCreateAccount = () => {\r\n        this.setState({ showCreateAccountDialog: false });\r\n    }\r\n\r\n    signUp = () => {\r\n        this.setState({ showCreateAccountDialog: true });\r\n        this.props.changeMode(AppMode.REGISTER);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"osblepage\" id=\"loginPage\">\r\n                <center>\r\n                    <div className=\"wrapper\">\r\n\r\n                        <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{ position: \"relative\", right: \".7rem\" }}></img>\r\n                        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                            <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                                <span className=\"fa fa-times\"></span>\r\n                            </button></div> : null}\r\n                        {this.state.showLookUpAccountDialog ?\r\n                            <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                getSecurityAnswer={this.getSecurityAnswer} /> : null}\r\n                        {this.state.showSecurityQuestionDialog ?\r\n                            <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                question={this.resetQ}\r\n                                answer={this.resetA}\r\n                                getNewPassword={this.getNewPassword} /> : null}\r\n                        {this.state.showResetPaswordDialog ?\r\n                            <ResetPasswordPage cancelResetPassword={this.cancelResetPassword}\r\n                                resetPassword={this.resetPassword} /> : null}\r\n                        <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n                            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24, fontWeight: \"500\" }}>\r\n\r\n                                <input\r\n                                    style={{ backgroundColor: \"white\" }}\r\n                                    ref={this.emailInputRef}\r\n                                    className=\"form-control enterEmail\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    id=\"emailInput\"\r\n                                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                                    required={true}\r\n                                />\r\n                            </label>\r\n\r\n                            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24, fontWeight: \"500\" }}>\r\n\r\n                                <input\r\n                                    ref={this.passwordInputRef}\r\n                                    className=\"form-control enterPassword\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    id=\"passwordInput\"\r\n                                    pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                                    required={true}\r\n                                />\r\n                            </label>\r\n\r\n                            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n\r\n                            <button id=\"login-btn\"\r\n                                type=\"submit\"\r\n\r\n                                className=\" btn btn-primary btn-block LoginButton\">\r\n                                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon} />\r\n                &nbsp;{this.state.loginBtnLabel}\r\n                            </button>\r\n                            <br></br>\r\n                            <p>\r\n                                <button type=\"button\" className=\"btn btn-link login-link\" id=\"createAccountBtn\"\r\n                                    onClick={this.signUp}>\r\n                                    Create an account</button> |\r\n                <button type=\"button\" className=\"btn btn-link login-link\" id=\"resetBtn\"\r\n                                    onClick={this.reset}>\r\n                                    Reset your password</button>\r\n                            </p>\r\n                            <p>\r\n                                <i>Developed by Hermes Obiang, Leonard Brkanac,\r\n                                     Joshua James Stallworth, Sean Brendan Washington,Tianhao Ye\r\n\r\n</i>\r\n                            </p>\r\n                        </form>\r\n\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport '../styles/FeedItem.css';\r\nexport default class FeedpostReply extends React.Component {\r\n \r\n    render() {\r\n        return (\r\n            <li key={this.props.key}>\r\n                <div style={{ width: \"98%\", boxShadow: \"0px 1px 5px rgba(0,0,0,0.55)\",borderRadius:\"5px\", margin: \".5rem\" }}>\r\n                    <div style={{ backgroundColor: \"#f5f5f5\",borderRadius:\"5px\" }}><div style={{ padding: \"3px\" }}><div style = {{marginLeft:\".4rem\"}}>{this.props.createdby}</div></div></div>\r\n                    <div id=\"replyItem\" style={{ padding: \"3px\", marginLeft: \".4rem\" }}>{this.props.content}</div>\r\n                        \r\n                </div>\r\n\r\n            </li>\r\n\r\n        )\r\n    }\r\n};","import React from \"react\";\r\nimport '../styles/FeedItem.css';\r\nimport FeedPostReply from './FeedPostReply.js'\r\nexport default class FeedpostItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showReply: false,\r\n            replies: this.props.replies,\r\n            seeReplies: false\r\n        };\r\n\r\n\r\n    }\r\n\r\n    showReply = (e) => {\r\n        this.setState(prevstate => ({ showReply: !prevstate.showReply }));\r\n    }\r\n    addreply = (e) => {\r\n        var newpost = {\r\n            createdby: \"Leonard\",\r\n            content: this._inputElement.value,\r\n            key: Date.now()\r\n        }\r\n\r\n        this.setState(prevstate => ({ replies: [newpost].concat(prevstate.replies) }));\r\n        this._inputElement.value = \"\";\r\n        this.setState({\r\n            seeReplies: true\r\n        })\r\n        this.showReply();\r\n        e.preventDefault();\r\n    }\r\n    createntries = (entry) => {\r\n        return <FeedPostReply content={entry.post_content} createdby={entry.createdby} key={entry.key}></FeedPostReply>\r\n    }\r\n    seeReplies = (e) => {\r\n        this.setState(prevstate => ({ seeReplies: !prevstate.seeReplies }));\r\n    }\r\n    render() {\r\n        var JSONreplies = this.state.replies;\r\n        var JSXreplies = JSONreplies.map(this.createntries)\r\n        return (\r\n            <li key={this.props.key}>\r\n\r\n                <div style={{ width: \"98%\", boxShadow: \"0px 1px 5px rgba(0,0,0,0.55)\", margin: \".5rem\", borderRadius: \"5px\" }}>\r\n                    <div style={{ borderRadius: \"5px\", backgroundColor: \"#f5f5f5\" }}>\r\n                        <div style={{ padding: \"3px\" }}><div style={{ marginLeft: \".4rem\" }}>{this.props.createdby}</div></div></div>\r\n                    <div id=\"postItem\" style={{ padding: \"3px\", marginLeft: \".4rem\" }}>{this.props.content}</div>\r\n\r\n                    <form onSubmit={this.addreply}>\r\n                        {\r\n                            this.state.showReply ?\r\n                                <div >\r\n                                    <textarea required={true} ref={(a) => this._inputElement = a} className=\"postinput\" id=\"FeedReplyBox\" placeholder=\"Enter Reply Here...\" style={{ marginBottom: \"0px\" }}></textarea>\r\n\r\n                                </div>\r\n                                :\r\n                                null\r\n                        }\r\n                        {\r\n                            this.state.seeReplies ?\r\n                                <ul style={{ listStyleType: \"none\", padding: \"0px\" }}>\r\n                                    {JSXreplies}\r\n                                </ul>\r\n                                :\r\n                                null\r\n                        }\r\n                        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                            <button type=\"button\" className=\"postitembutton\" id=\"FeedReplyButton1\" onClick={this.showReply}>{this.state.showReply ? \"Cancel\" : \"Reply\"}</button>\r\n                            <button type=\"button\" className=\"postitembutton\" id=\"FeedHide-Show-Reply\" onClick={this.seeReplies} style={{ width: \"8rem\" }}>{this.state.seeReplies ? \"Hide Replies\" : \"Show Replies \"}{this.state.seeReplies ? \"\" : \"(\" + this.state.replies.length + \")\"}</button>\r\n                            {\r\n                                this.state.showReply ?\r\n                                    <button className=\"postitembutton\" id=\"FeedReplyButton\" style={{ width: \"4rem\" }}>Submit</button>\r\n                                    :\r\n                                    null\r\n                            }\r\n\r\n                        </div>\r\n                    </form>\r\n\r\n\r\n                </div>\r\n\r\n            </li>\r\n\r\n        )\r\n    }\r\n};","import { set } from 'mongoose';\r\nimport React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport '../styles/FeedPage.css';\r\nimport FeedPostItem from './FeedPostItem.js'\r\nclass FeedPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = { // each json object should follow at least this format\r\n            posts: this.props.selectedCourse.posts,\r\n            \r\n            showdropdown: false,\r\n            curselected: \"Everyone\",\r\n            isanonymous: false,\r\n        };\r\n            }; \r\n        \r\n\r\n\r\n    \r\n    addpost = async (e) => {\r\n        var newpost = {\r\n            userid: this.props.userObj.userid, \r\n            createdby: this.props.userObj.first_name + \" \" + this.props.userObj.last_name,\r\n            post_content: this._inputElement.value,\r\n            key: Date.now(),\r\n            replies: []\r\n        }\r\n        if (this.state.isanonymous == true) {\r\n            newpost.createdby = \"Anonymous\"\r\n        }\r\n   \r\n        this._inputElement.value = \"\";\r\n               \r\n       \r\n        \r\n        console.log(newpost);\r\n        e.preventDefault();\r\n        const url = '/courses/addpost/' + this.props.selectedCourse.course_name;\r\n        let body = newpost;\r\n        let res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(body)\r\n        });\r\n\r\n        console.log(res.status)\r\n        if (res.status === 200) { //successful account creation!\r\n           this.updateEntries();\r\n           this.props.refreshOnUpdate(AppMode.FEED);\r\n            //this.props.done(\"New account created! Enter credentials to log in.\", false);\r\n            //this.setState({ posts: newposts });\r\n            \r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            //this.props.done(resText, false);\r\n        }\r\n        //this.setState({ posts: newposts });\r\n        \r\n    }\r\n    toggledropdown = (e) => {\r\n        this.setState(prevstate => ({ showdropdown: !prevstate.showdropdown }));\r\n\r\n    }\r\n    changeselected = (newfilter) => {\r\n        this.setState({\r\n            curselected: newfilter\r\n        })\r\n        this.toggledropdown();\r\n    }\r\n    setanonymous = (e) => {\r\n        this.setState(prevstate => ({ isanonymous: !prevstate.isanonymous }));\r\n    }\r\n    createntries = (entry) => {\r\n        return <FeedPostItem postid = {entry._id} content={entry.post_content} createdby={entry.createdby} key={entry.key} replies = {entry.replies}></FeedPostItem>\r\n    }\r\n    updateEntries = async () => {\r\n        let response = await fetch(\"/courses/\" + this.props.selectedCourse.course_name);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        this.setState({\r\n            posts: obj.posts\r\n        });\r\n    }\r\n\r\n    getEntries = async () => {\r\n\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        // get most recent list of assignments\r\n        let response = await fetch(\"/courses/\" + this.props.selectedCourse.course_name);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        this.setState({\r\n            posts: obj.posts\r\n        }, () => console.log(this.state.posts, obj.posts));\r\n\r\n    }\r\n\r\n    componentDidUpdate = async (prevProps, prevState) => { // updates current assignmentlist\r\n        if (prevProps.selectedCourse.course_name === this.props.selectedCourse.course_name) {\r\n            //do nothing\r\n        } else {\r\n\r\n            this.setState({\r\n                posts: this.props.selectedCourse.posts\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        var JSONposts =this.state.posts;\r\n        console.log(\"selected\" + this.props.selectedCourse);\r\n        if (JSONposts)\r\n        {\r\n            var JSXposts = JSONposts.map(this.createntries) \r\n        }\r\n        \r\n        return (\r\n            <div className=\"feedpage\" id=\"feedPage\">\r\n                <div className=\"flexwrapper\">\r\n                    <div className=\"notifications\">\r\n                        <h1 style={{ margin: \".7rem\" ,fontSize:\"30px\"}}>Notifications</h1>\r\n                        <ul>\r\n                            <li>Notification 1</li>\r\n                            <li>Notification 2</li>\r\n                            <li>Notification 3</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"feed\">\r\n                        <h1 style={{ margin: \".7rem\" ,fontSize:\"30px\"}}>Activity Feed</h1>\r\n\r\n                        <form onSubmit={this.addpost}>\r\n                            <textarea required={true} ref={(a) => this._inputElement = a} className=\"postinput\" id=\"FeedPostBox\" placeholder=\"Enter new post here...\"></textarea>\r\n                            <div style={{ display: \"flex\", flexDirection: \"row\", height: \"2.5rem\" }}>\r\n                                <button type=\"submit\" className=\"btn btn-primary\" id=\"FeedPostButton\" style={{ float: \"left\", marginLeft: \".5rem\" }}>Post</button>\r\n                                <button type=\"button\" onClick={() => this.toggledropdown()} className=\"btn btn-primary\" style={{ float: \"left\", marginLeft: \".5rem\", width: \"10rem\" }}>{this.state.curselected}</button>\r\n                                <input type=\"checkbox\" style={{ marginTop: \".8rem\", marginLeft: \"1rem\" }} onClick={this.setanonymous}></input>\r\n                                <p style={{ marginTop: \".4rem\", marginLeft: \".5rem\" }}>Post Anonymously</p>\r\n                            </div>\r\n                        </form>\r\n                        {this.state.showdropdown ?\r\n                            <div style={{ display: \"flex\", flexDirection: \"column\" }} className=\"mydropdown\">\r\n                                <button className=\"btn btn-primary\" style={{ width: \"10rem\", borderRadius: \"0px\" }} onClick={() => this.changeselected(\"Everyone\")}>Everyone</button>\r\n                                <button className=\"btn btn-primary\" style={{ width: \"10rem\", borderRadius: \"0px\" }} onClick={() => this.changeselected(\"Instructors only\")}>Instructors Only</button>\r\n                            </div>\r\n\r\n                            :\r\n                            null\r\n\r\n                        }\r\n                        \r\n                        <ul style={{ listStyleType: \"none\", padding: \"0px\" ,marginTop:\"1rem\"}}>\r\n                            {JSXposts}\r\n                        </ul>\r\n\r\n                    </div>\r\n                    <div className=\"files\">\r\n                        <h1 style={{ margin: \".7rem\" ,fontSize:\"30px\"}}>Files</h1>\r\n                        <ul>\r\n                            <li>File 1</li>\r\n                            <li>File 2</li>\r\n                            <li>File 3</li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react'\r\n// Code from https://medium.com/@subalerts/create-dynamic-table-from-json-in-react-js-1a4a7b1146ef\r\nexport default class GradeTable extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n\r\n    getKeys = function () {\r\n        return Object.keys(this.props.data[0]);\r\n    }\r\n\r\n    getHeader = function () {\r\n        \r\n        let headerRow =[<th>Assignment:</th>];\r\n        for (let i = 0; i < this.props.data.length; i++)\r\n        {\r\n            headerRow.push(<th key={i}>{this.props.data[i].assignment_name }</th>)\r\n        }\r\n        return headerRow;\r\n        \r\n\r\n    }\r\n\r\n    getRowsData = function () {\r\n        let row = [<th>Grade</th>];\r\n        for (let i = 0; i < this.props.data.length; i++)\r\n        {\r\n            row.push(<th key={i}>{this.props.data[i].grade }</th>)\r\n        }\r\n        \r\n            return <tr>{row}</tr>\r\n        \r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>{this.getHeader()}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getRowsData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport GradeTable from './GradeTable'\r\n\r\nclass GradesPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let userGrades = [];\r\n        for(let i = 0; i < this.props.selectedCourse.assignments.length; i++)\r\n        {\r\n            for ( let j = 0 ; j < this.props.selectedCourse.assignments[i].grades.length; j++)\r\n            {\r\n                if (this.props.selectedCourse.assignments[i].grades[j].userid === this.props.userObj.userid)\r\n                {\r\n                    userGrades.push({\r\n                        assignment_name: this.props.selectedCourse.assignments[i].assignment_name,\r\n                        grade: this.props.selectedCourse.assignments[i].grades[j].grade\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        console.log(userGrades);\r\n        this.state = {\r\n            data : userGrades,\r\n            hasGradebook : true,\r\n            isstudent: true\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"feedpage\" id=\"gradePage\">\r\n                <center>\r\n        <h1>Gradebook for {this.props.selectedCourse.course_name}</h1>\r\n                    <button id=\"gbOptions\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#gbOptionsModal\">Gradebook Options</button>\r\n                    {this.props.userObj.is_instructor ?\r\n                    <div>\r\n                        \r\n                        <GradeTable data = {this.state.data}></GradeTable>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        \r\n                        <GradeTable data = {this.state.data}></GradeTable>\r\n                    </div>\r\n                }\r\n                \r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GradesPage;","import React from \"react\";\r\n\r\nexport default class Assignment extends React.Component {\r\n    //style={{position:\"absolute\",left:\"10rem\"}}\r\n    state = {\r\n        assignmentid: this.props.assignmentid\r\n    }\r\n    render() {\r\n        return (\r\n            <tr key={this.props.key} style={{ borderBottom: \"1px solid #dee2e6\" }}>\r\n                <td >{<div style={{ marginTop: \"1rem\",marginLeft:\".8rem\" }}>{this.props.assignment}</div>}</td>\r\n                <td >{<div style={{ marginTop: \"1rem\" }}>{this.props.duedate}</div>}</td>\r\n                <td >{<div style={{ marginTop: \".35rem\" }}>{this.props.didsubmit ? <button onClick={() => { this.props.showModal(this.state.assignmentid) }} style={{width:\"5rem\",marginLeft:\"0px\"}} className=\"postitembutton\" >Resubmit</button>:<button style={{width:\"5rem\",marginLeft:\"0px\"}} className=\"postitembutton\" onClick={() => { this.props.showModal(this.state.assignmentid) }}>Submit</button>}</div>}</td>\r\n                <td>{<div style={{ marginTop: \"1rem\" }}>{this.props.latestactivity}</div>}</td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n};","import React from \"react\";\r\n\r\nexport default class AssignmentProf extends React.Component {\r\n    //style={{position:\"absolute\",left:\"10rem\"}}\r\n    state = {\r\n        assignmentid: this.props.assignmentid\r\n    }\r\n    render() {\r\n        return (\r\n            <tr key={this.props.key} style={{ borderBottom: \"1px solid #dee2e6\" }}>\r\n                \r\n                <td >{<div style={{ marginTop: \"1rem\",marginLeft:\".8rem\" }}>{this.props.assignment}</div>}</td>\r\n                <td >{<div style={{ marginTop: \"1rem\" }}>{this.props.duedate}</div>}</td>\r\n                <td >{<div style={{ marginTop: \".35rem\" }}><button style={{width:\"5rem\",marginLeft:\"0px\"}} onClick={() => this.props.showSubmissions(this.state.assignmentid)} className=\"postitembutton\" >View</button></div>}</td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n};","import React from \"react\";\r\n\r\nvar newgrade = null;\r\nexport default class SubmissionModal extends React.Component {\r\n    //style={{position:\"absolute\",left:\"10rem\"}}\r\n\r\n    state = {\r\n        currentgrades: [],\r\n    }\r\n\r\n    getGrades = () => {\r\n        console.log(this.props.assignments, this.props.assignmentid);\r\n    }\r\n    componentDidMount() {\r\n\r\n        //this.getGrades();\r\n        for (let i = 0; i < this.props.assignments.length; i += 1) {\r\n            if (this.props.assignments[i]._id === this.props.assignmentid) {\r\n                this.setState({\r\n                    currentgrades: this.props.assignments[i].grades\r\n                }, () => console.log(this.state.currentgrades))\r\n            }\r\n        }\r\n    }\r\n\r\n    updateGrade = (userid, date, content, oldgrade) => {\r\n        console.log(userid, date, content, oldgrade,newgrade,this.props.assignmentid, this.props.selectedCourse.course_name);\r\n        const url = '/courses/updategrade/' + this.props.selectedCourse.course_name;\r\n        let body;\r\n        if (newgrade === null) {\r\n            body = { userid: userid, assignmentid: this.props.assignmentid, grade: oldgrade, submit_date: date, submission_content: content };\r\n        } else {\r\n            body = { userid: userid, assignmentid: this.props.assignmentid, grade: newgrade, submit_date: date, submission_content: content };\r\n        }\r\n        fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(body)\r\n        }).then(console.log(\"Grade updated Succesfully\"))\r\n            \r\n        newgrade = null;\r\n\r\n        this.props.updateEntries();\r\n\r\n\r\n    }\r\n    createntries = (entry) => {\r\n        return <tr key={this.props.key} style={{ borderBottom: \"1px solid #dee2e6\" }}>\r\n            <td >{<div style={{ marginTop: \".7rem\" }}>{entry.userid}</div>}</td>\r\n            <td >{<div style={{ marginTop: \".7rem\" }}>{entry.submit_date === \"\" ? \"N/A\" : entry.submit_date}</div>}</td>\r\n            <td >{<div style={{ marginTop: \".7rem\" }}>{entry.submission_content}</div>}</td>\r\n            <td>{<input style={{ marginTop: \".7rem\" }} defaultValue={entry.grade < 0 ? 0 : entry.grade} onChange={(event) => { newgrade = event.target.value }}  ></input>}</td>\r\n            <td><button className=\"postitembutton\" onClick={() => { this.updateGrade(entry.userid, entry.submit_date, entry.submission_content, entry.grade) }} style={{ width: \"4rem\" }} >Update</button></td>\r\n        </tr>\r\n\r\n    }\r\n\r\n    render() {\r\n        var JSONgrades = this.state.currentgrades;\r\n        var JSXgrades = JSONgrades.map(this.createntries)\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n                <div className=\"modal-content\">\r\n\r\n                    <div className=\"modal-header\">\r\n                        <p className=\"modal-title\">Submissions</p>\r\n                        <button className=\"btn btn-primary\" onClick={this.props.showSubmissions}>\r\n                            &times;</button>\r\n                    </div>\r\n                    <table className=\"table table-hover\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th>Student ID</th>\r\n                                <th>Date Submitted</th>\r\n                                <th>Content</th>\r\n                                <th>Grade</th>\r\n                                <th style={{ width: \"10rem\", paddingLeft: \"1.5rem\" }}>Update Grade</th>\r\n                            </tr>\r\n\r\n                        </thead>\r\n                        <tbody>\r\n                            {JSXgrades}\r\n\r\n                        </tbody>\r\n\r\n                    </table>\r\n\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React from \"react\";\r\nimport '../styles/FeedItem.css';\r\nimport Assignment from './Assignment.js'\r\nimport AssignmentProf from './AssignmentProf.js'\r\nimport SubmissionModal from './SubmissionModal.js'\r\nexport default class AssignmentsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            assignments: [],\r\n            createAssignment: false,\r\n            showModal: false,\r\n            showSubmissions: false,\r\n            curassignmentid: \"\",\r\n        };\r\n        // old assignment format assignment: \"Assignment 1\", duedate: \"11/18/2020 11:59 PM\", didsubmit: false, latestactivity: \"\"\r\n\r\n\r\n    }\r\n\r\n    updateGrade = async (e) => {\r\n        this.setState({\r\n            showModal: false\r\n        })\r\n        var submission_content = e.target[0].value;\r\n        e.preventDefault();\r\n        const url = '/courses/updategrade/' + this.props.selectedCourse.course_name;\r\n        let body = { userid: this.props.userObj.userid, assignmentid: this.state.curassignmentid, grade: -1, submit_date: '12/7/2020', submission_content: submission_content };\r\n        let res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(body)\r\n        });\r\n        if (res.status == 200) { //successful account creation!\r\n            console.log(\"GRADE UPDATED\");\r\n            //this.props.done(\"New account created! Enter credentials to log in.\", false);\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            //this.props.done(resText, false);\r\n        }\r\n\r\n\r\n    }\r\n    showModal = (assignmentid) => {\r\n\r\n        this.setState({\r\n            curassignmentid: assignmentid\r\n        }, () => this.setState(prevstate => ({ showModal: !prevstate.showModal })))\r\n\r\n\r\n\r\n    }\r\n    showSubmissions = (assignmentid) => {\r\n\r\n        this.setState({\r\n            curassignmentid: assignmentid\r\n        })\r\n\r\n        this.setState(prevstate => ({ showSubmissions: !prevstate.showSubmissions }))\r\n    }\r\n\r\n    /*\r\n    const assignmentSchema = new Schema({\r\n        assignment_name: String,\r\n        assignment_content: String,\r\n        instructor: String,\r\n        due_date: Number,\r\n        grades: [gradeSchema] // each student will be:\r\n      \r\n      });\r\n      */\r\n    createAssignment = async (e) => {\r\n        var curClass = this.props.selectedCourse.course_name // name of currently selected class\r\n        var newGrades = []\r\n        var assignmentName = e.target[0].value;\r\n        var assignmentText = e.target[2].value;\r\n        var assignmentDue = e.target[1].value;\r\n        e.preventDefault();\r\n        let response = await fetch(\"/courses/\" + curClass);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        var studentarray = obj.students;\r\n        for (const student in studentarray) {\r\n            newGrades.push({\r\n                userid: studentarray[student],\r\n                grade: -2, // -2 means didnt submit, -1 means did submit, anything >=0 is a grade\r\n                submission_content: \"\", // this is where we will store submissions\r\n                submit_date: \"\"\r\n            })\r\n        }\r\n        let assignmentData = {\r\n            assignment_name: assignmentName,\r\n            assignment_content: assignmentText,\r\n            instructor_id: this.props.userObj.userid,\r\n            due_date: assignmentDue,\r\n            grades: newGrades\r\n        }\r\n        const url = '/assignments/' + curClass; // should be \r\n        let res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(assignmentData)\r\n        });\r\n        if (res.status == 200) { //successful account creation!\r\n            this.updateEntries();\r\n            //this.props.done(\"New account created! Enter credentials to log in.\", false);\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n        }\r\n\r\n\r\n\r\n    }\r\n    updateEntries = async () => {\r\n        let response = await fetch(\"/courses/\" + this.props.selectedCourse.course_name);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        this.setState({\r\n            assignments: obj.assignments\r\n        });\r\n    }\r\n    createntries = (entry) => {\r\n        if (this.props.userObj.is_instructor === true) {\r\n            return <AssignmentProf showSubmissions={this.showSubmissions} assignmentid={entry._id} assignment={entry.assignment_name} duedate={entry.due_date} didsubmit={false} latestactivity={\"\"}></AssignmentProf>\r\n        } else {// will need to retrieve the grade object corresponding to assignment and student in the current class for didsubmit and latestactivity\r\n            return <Assignment showModal={this.showModal} assignmentid={entry._id} assignment={entry.assignment_name} duedate={entry.due_date} didsubmit={false} latestactivity={\"\"}></Assignment>\r\n        }\r\n\r\n    }\r\n    toggleCreate = (e) => {\r\n        this.setState(prevstate => ({ createAssignment: !prevstate.createAssignment }))\r\n    }\r\n    getAssignments = async () => {\r\n        let response = await fetch(\"/courses/\" + this.props.selectedCourse.course_name);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        this.setState({\r\n            assignments: obj.assignments\r\n        })\r\n        //return [{ assignment: \"Assignment 1\", duedate: \"11/18/2020 11:59 PM\", didsubmit: false, latestactivity: \"\" },\r\n        //{ assignment: \"Assignment 2\", duedate: \"11/23/2020 11:59 PM\", didsubmit: true, latestactivity: \"Submitted 11/18/2020 10:43 PM\" }]\r\n    }\r\n    componentDidMount = async () => {\r\n        // get most recent list of assignments\r\n        let response = await fetch(\"/courses/\" + this.props.selectedCourse.course_name);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        this.setState({\r\n            assignments: obj.assignments\r\n        }, () => console.log(this.state.assignments, obj.assignments));\r\n\r\n    }\r\n\r\n    componentDidUpdate = async (prevProps, prevState) => { // updates current assignmentlist\r\n        if (prevProps.selectedCourse.course_name === this.props.selectedCourse.course_name) {\r\n            //do nothing\r\n        } else {\r\n\r\n            this.setState({\r\n                assignments: this.props.selectedCourse.assignments\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //this.getAssignments();\r\n        var JSONassignments = this.state.assignments;\r\n        var JSXassignments = JSONassignments.map(this.createntries)\r\n        return (\r\n            <div className=\"feedpage\" id=\"assignmentPage\">\r\n                <h1 style={{ margin: \"1.5rem\", fontSize: \"30px\" }}>Assignments</h1>\r\n                {\r\n                    this.state.showModal ?\r\n                        <div className=\"modal\" role=\"dialog\">\r\n                            <div className=\"modal-content\">\r\n                                <div className=\"modal-header\">\r\n                                    <p className=\"modal-title\">Create Submission</p>\r\n                                    <button className=\"btn btn-primary\" onClick={this.showModal}>\r\n                                        &times;</button>\r\n                                </div>\r\n                                <div className=\"modal-body\">\r\n                                    <form onSubmit={this.updateGrade}>\r\n                                        <textarea style={{ width: \"90%\", height: \"500px\" }}></textarea>\r\n                                        <div className=\"modal-footer\">\r\n\r\n                                            <button type=\"submit\" className=\"btn btn-primary\" >\r\n                                                Submit</button>\r\n\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    this.state.showSubmissions ?\r\n                        <SubmissionModal updateEntries={this.updateEntries} selectedCourse={this.props.selectedCourse} assignments={this.state.assignments} assignmentid={this.state.curassignmentid} showSubmissions={this.showSubmissions}></SubmissionModal>\r\n                        :\r\n                        null\r\n                }\r\n\r\n                {this.props.userObj.is_instructor ?\r\n                    <div>\r\n                        <button onClick={this.toggleCreate}>Create Assignment</button>\r\n                        {this.state.createAssignment ?\r\n                            <div>\r\n                                <form onSubmit={this.createAssignment}>\r\n                                    <input type=\"text\" name=\"assignmentName\" required={true} placeholder=\"Assignment Name\" />\r\n                                    <input type=\"text\" required={true} placeholder=\"Due: mm/dd/yyyy\" />\r\n                                    <textarea name=\"assignmentText\" type=\"text\" required={true} placeholder=\"Enter Assignment Details here...\"></textarea>\r\n                                    <button type=\"submit\" className=\"btn btn-primary\" >Create</button>\r\n                                </form>\r\n                            </div>\r\n                            :\r\n                            null\r\n                        }\r\n                        <table className=\"table table-hover\">\r\n                            <thead className=\"thead-light\">\r\n                                <tr>\r\n                                    <th style={{ width: \"25rem\", paddingLeft: \"1.5rem\" }}>Assignment</th>\r\n                                    <th>Due Date</th>\r\n                                    <th>View Submissions</th>\r\n                                </tr>\r\n\r\n                            </thead>\r\n                            <tbody>\r\n                                {JSXassignments}\r\n\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                    :\r\n                    <table className=\"table table-hover\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th style={{ width: \"25rem\", paddingLeft: \"1.5rem\" }}>Assignment</th>\r\n                                <th>Due Date</th>\r\n                                <th>Actions</th>\r\n                                <th>Latest Activity</th>\r\n                            </tr>\r\n\r\n                        </thead>\r\n                        <tbody>\r\n                            {JSXassignments}\r\n\r\n                        </tbody>\r\n\r\n                    </table>\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nclass AnalyticsPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\" id=\"analyticsPage\">\r\n            <center>\r\n            <h1 >Analytics</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"osble2.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default AnalyticsPage;","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport AppMode from '../AppMode';\r\nimport '../styles/courseSettings.css';\r\n\r\nclass CourseSettingsPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n        prefix: \"\",\r\n        course_number: 0,\r\n        course_name: \"\",\r\n        term: \"\",\r\n        year: 0,\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        instructor: this.props.userObj.first_name + ' '+ this.props.userObj.last_name,\r\n        instructor_id: this.props.userObj.userid,\r\n        students: [],\r\n        posts: [],\r\n        assignments: []\r\n        }\r\n    }\r\n\r\n    updateCourse = async (event) => {\r\n//         course_name: String,\r\n//   instructor: String,\r\n//   students: [],// just an array of userid's for easy access\r\n//   posts: [postSchema],\r\n//   assignments: [assignmentSchema],\r\n       \r\n        \r\n        const url = '/courses/' + this.state.course_name + ' ' + this.state.course_number;\r\n        console.log(this.state);\r\n        let res;\r\n        console.log(this.state);\r\n        res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state)\r\n        });\r\n        if (res.status == 201) { //successful account creation!\r\n            this.props.changeMode(AppMode.FEED);\r\n            this.props.loadCourses()\r\n            //this.props.done(\"New account created! Enter credentials to log in.\", false);\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            //this.props.done(resText, false);\r\n        }\r\n        \r\n    }\r\n\r\n    cancelReturnHomepage = async (event) => {\r\n        this.props.changeMode(AppMode.FEED);\r\n    }\r\n\r\n    handleOnChange = (event) => {\r\n        if (event.target.name == \"Prefix\") {\r\n            this.setState({ prefix: event.target.value });\r\n        }\r\n        else if (event.target.name == \"Course-Number\") {\r\n            this.setState({ course_number: event.target.value });\r\n        }\r\n        else if (event.target.name == \"Course-Name\") {\r\n            this.setState({ course_name: event.target.value });\r\n        }\r\n        else if (event.target.name == \"Course-Term\") {\r\n            this.setState({ term: event.target.value });\r\n        }\r\n        else if (event.target.name == \"Course-Year\") {\r\n            this.setState({ year: event.target.value });\r\n        }\r\n        else if (event.target.name == \"Start-Date\") {\r\n            this.setState({ start_date: event.target.value });\r\n        }\r\n\r\n        else if (event.target.name == \"End-Date\") {\r\n            this.setState({ end_date: event.target.value });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\" id=\"courseSettingPage\">\r\n            <center>\r\n            <h1 >{this.props.createCourse?\"Create Course\":\"Update Course\"}</h1>\r\n            </center>\r\n            <label className=\"form-label-prefix\">\r\n                {/* Label for Prefix */}\r\n                Prefix\r\n                <input\r\n                autoComplete=\"on\"\r\n                className=\"form-control-form-text enterPrefix\"\r\n                name=\"Prefix\"\r\n                id=\"UniqueCoursePrefix\"\r\n                type=\"text\"\r\n                onChange={this.handleOnChange}\r\n                required={true}\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseNumber */}\r\n                Course Number\r\n                <input\r\n                autoComplete=\"on\"\r\n                className=\"form-control-form-text enterCourseNumber\"\r\n                name=\"Course-Number\"\r\n                id=\"CourseNumber\"\r\n                type=\"text\"\r\n                onChange={this.handleOnChange}\r\n                required={true}\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseName */}\r\n                Course Name\r\n                <input\r\n                autoComplete=\"on\"\r\n                className=\"form-control-form-text\"\r\n                name=\"Course-Name\"\r\n                id=\"CourseName\"\r\n                type=\"text\"\r\n                onChange={this.handleOnChange}\r\n                required={true}\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseTerm */}\r\n                Term\r\n                <input\r\n                autoComplete=\"on\"\r\n                className=\"form-control-form-text\"\r\n                name=\"Course-Term\"\r\n                id=\"CourseTerm\"\r\n                type=\"text\"\r\n                onChange={this.handleOnChange}\r\n                required={true}\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseYear */}\r\n                Year\r\n                <input\r\n                autoComplete=\"on\"\r\n                className=\"form-contorl-form-text\"\r\n                name=\"Course-Year\"\r\n                id=\"CourseYear\"\r\n                onChange={this.handleOnChange}\r\n                type=\"text\"\r\n                required={true}\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseStartDate */}\r\n                Start Date\r\n                <input\r\n                className=\"form-control\"\r\n                name=\"Start-Date\"\r\n                onChange={this.handleOnChange}\r\n                id=\"CourseStartDate\"\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseEndDate */}\r\n                End Date\r\n                <input\r\n                className=\"form-control\"\r\n                name=\"End-Date\"\r\n                id=\"CourseEndDate\"\r\n                onChange={this.handleOnChange}\r\n                ></input>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseTimeZone */}\r\n                Time zone\r\n                <input\r\n                name=\"Course-Time-Zone\"\r\n                id=\"CourseTimeZone\"\r\n                ></input> \r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseMeetingTimes */}\r\n                Meeting Times\r\n\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseBreaksAndHolidays */}\r\n                Holidays\r\n                <label>\r\n                    Allow students to reply to threads posted in activity feed\r\n                    <input\r\n                        name=\"Allow-Replies-To-Threads\"\r\n                        id=\"AllowRepliesToThreads\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseSettingCheckBoxes */}\r\n                Course Settings\r\n                <label>\r\n                    Allow students to post new threads in activity feed\r\n                    <input\r\n                        name=\"Post-New-Threads\"\r\n                        id=\"PostNewThreads\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Allow students to reply to threads posted in activity feed\r\n                    <input\r\n                        name=\"Students-Reply-To-Threads\"\r\n                        id=\"ReplyToThreads\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Allow students to post events in course calendar\r\n                    <input\r\n                        name=\"Students-Post-Events\"\r\n                        id=\"StudentsPostEvents\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Require an instructor to approve students(s) calendar events before they appear in the course calendar\r\n                    <input\r\n                        name=\"Instructor-Approve-Event\"\r\n                        id=\"InstructorApproveEvent\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Course is inactive(only instrutors/observers can log in)\r\n                    <input\r\n                        name=\"Course-Is-Inactive\"\r\n                        id=\"CourseIsInactive\"\r\n                        type=\"checkbox\" \r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Hide the OSBLE Mail icons for this course\r\n                    <input\r\n                        name=\"Hide-Osble-Mail\"\r\n                        id=\"HideOsbleMail\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Set course as a 'programming' oriented course\r\n                    <input\r\n                        name=\"Programming-Oriented\"\r\n                        id=\"ProgrammingOriented\"\r\n                        type=\"checkbox\"\r\n                    ></input>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Amount of weeks into the future to show events in calendar\r\n                    <input\r\n                    name=\"Show-Weeks-Into-Future\"\r\n                    id=\"ShowWeeksIntoFuture\"\r\n                    type=\"text\"\r\n                    ></input>\r\n                </label>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                {/* Label for CourseLatePolicy */}\r\n                Late Policy\r\n                <label>\r\n                    Students may submit assignments up to\r\n                    <input\r\n                    className=\"Late-Assignment-Limit\"\r\n                    id=\"LateAssignmentLimit\"\r\n                    ></input>\r\n                </label>\r\n                <label>\r\n                    minutes late at no penalty, after which a penalty of\r\n                    <input\r\n                    className=\"Late-Assignment-Penalty\"\r\n                    id=\"LateAssignmentPenalty\"\r\n                    ></input>\r\n                </label>\r\n                <label>\r\n                    percent per\r\n                    <input\r\n                    className=\"Late-Assignment-Penalty-Percentage\"\r\n                    id=\"LateAssignmentPenaltyPecentage\"\r\n                    ></input>\r\n                </label>\r\n                <label>\r\n                    hour late will be applied. Assignments that submitted more than\r\n                    <input\r\n                    className=\"Max-Late-Assignment-Limit\"\r\n                    id=\"MaxLateAssignmentLimit\"\r\n                    ></input>\r\n                </label>\r\n                <label>\r\n                    hours after the due date and time will recive an automatic 0.\r\n                </label>\r\n            </label>\r\n            <br></br>\r\n            {/* Button for updating course */}\r\n            <button\r\n            className=\"Comfirmation-Update-Course-Btn\"\r\n            role=\"submit\"\r\n            id=\"ComfirmUpdateCourseBtn\"\r\n            type=\"submit\"\r\n            color=\"#191970\"\r\n            onClick={this.props.userObj.is_instructor == true? this.updateCourse:null}\r\n        >{this.props.createCourse ? \"Create Course\":\"Update Course\"}</button>\r\n            \r\n            {/* Button for canceling changes and returning to homepage */}\r\n            <button\r\n            className=\"Return-To-Homepage-Btn\"\r\n            role=\"submit\"\r\n            id=\"ReturnToHomepageBtn\"\r\n            type=\"submit\"\r\n            color=\"#191970\"\r\n            onClick={this.cancelReturnHomepage}\r\n            >Return to Homepage</button>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CourseSettingsPage;","import React from 'react'\r\n\r\nexport default class UsersList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { showConfirmDelete: false };\r\n        \r\n    }\r\n    editUser = (id) => {\r\n        this.props.setEditId(id);\r\n        //this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n    }\r\n\r\n\r\n    deleteUser = () => {\r\n        this.props.deleteUser();\r\n        this.setState({ showConfirmDelete: false });\r\n    }\r\n\r\n\r\n    //confirmDelete -- Triggered when the user clicks the delete button\r\n    //for a given round. The id paam is the unique property that \r\n    //identifies the round. Set the state variable representing the id\r\n    //of the round to be deleted and then present a dialog box asking\r\n    //the user to confirm the deletion.\r\n    confirmDelete = (id) => {\r\n        this.props.setDeleteId(id);\r\n        this.setState({ showConfirmDelete: true });\r\n    }\r\n    renderTable = () => {\r\n        let table = [];\r\n        for (let r = 0; r < this.props.data.length; ++r) {\r\n            table.push(\r\n                <tr key={r}>\r\n                    <td>{this.props.data[r].name}</td>\r\n                    \r\n                    <td>{this.props.data[r].id}</td>\r\n                    <td><button onClick={this.props.menuOpen ? null : () =>\r\n                        this.editUser(r)}>\r\n                        <span className=\"fa fa-pencil\"></span></button></td>\r\n                    <td><button onClick={this.props.menuOpen ? null :\r\n                        () => this.confirmDelete(r)}>\r\n                        <span className=\"fa fa-trash\"></span></button></td>\r\n                </tr>\r\n            );\r\n        }\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h2>{this.props.type}</h2>\r\n                <table className=\"table table-hover\">\r\n                    <thead className=\"thead-light\"><tr>\r\n                        <th>Name </th>\r\n                        <th>ID </th>\r\n                        <th></th>\r\n                        <th></th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>{this.renderTable()}</tbody>\r\n\r\n                </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport UsersList from './UsersList'\r\nclass UsersPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data:\r\n            {\r\n                'Instructors': [{ id: 'hermes@wsu.edu', name: \"Hermes Obiang\" }],\r\n                'TAs': [{ id: 'Joshua@wsu.edu', name: \"Joshua Stallworth\" }],\r\n                'Students': [{ id: 'sean@wsu.edu', name: \"Sean Washington\" }, { id: 'Leonard@wsu.edu', name: \"Leonard Brkanac\" }]\r\n\r\n\r\n            }\r\n\r\n            ,\r\n            courseId: 1\r\n\r\n        }\r\n        this.data ={\r\n            'Instructors': [{ id: 'hermes@wsu.edu', name: \"Hermes Obiang\" }],\r\n            'TAs': [{ id: 'Joshua@wsu.edu', name: \"Joshua Stallworth\" }],\r\n            'Students': [{ id: 'sean@wsu.edu', name: \"Sean Washington\" }, { id: 'Leonard@wsu.edu', name: \"Leonard Brkanac\" }]\r\n\r\n\r\n        }\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = { errorMsg: \"\" };\r\n        this.getUserLists = this.getUserLists.bind(this);\r\n    }\r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({ errorMsg: \"\" });\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({ errorMsg: \"\" });\r\n    }\r\n\r\n    editUser = async (newData) => {\r\n        /*  const url = '/rounds/' + this.props.userObj.id + '/' + \r\n             this.props.userObj.rounds[this.editId]._id;\r\n         const res = await fetch(url, {\r\n             headers: {\r\n                 'Accept': 'application/json',\r\n                 'Content-Type': 'application/json'\r\n                 },\r\n             method: 'PUT',\r\n             body: JSON.stringify(newData)}); \r\n         const msg = await res.text();\r\n         if (res.status != 200) {\r\n             this.setState({errorMsg: msg});\r\n             this.props.changeMode(AppMode.ROUNDS);\r\n         } else {\r\n             this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n         } */\r\n    }\r\n    deleteUser = async () => {\r\n        /* const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }   */\r\n    }\r\n\r\n\r\n    getUserLists = function () {\r\n        var roles = Object.keys(this.state.data);\r\n        var classData = this.state.data;\r\n        return roles.map((role, index) => {\r\n            return <UsersList data={classData[role]}\r\n                type={role}\r\n                setEditId={this.setEditId}\r\n                setDeleteId={this.setDeleteId}\r\n                deleteRound={this.deleteRound}\r\n                changeMode={this.props.changeMode}\r\n                menuOpen={this.props.menuOpen} />\r\n\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"feedpage\" id=\"userPage\">\r\n                <center>\r\n                    <h1> Roster</h1>\r\n\r\n\r\n                    <div id=\"add_update_users\" style={{ display: 'block' }}>\r\n                        <h4>\r\n                            Add Single User\r\n                        </h4>\r\n                        <div>\r\n                            <a href=\"/Roster/Create\">Add By School ID</a>&nbsp;&nbsp;\r\n                <a href=\"/Roster/CreateByEmail\">Add By Email</a>&nbsp;&nbsp;\r\n            </div>\r\n                    </div>\r\n                    <UsersList data={this.data[\"Instructors\"]}\r\n                type=\"Instructors\"\r\n                setEditId={this.setEditId}\r\n                setDeleteId={this.setDeleteId}\r\n                deleteRound={this.deleteRound}\r\n                changeMode={this.props.changeMode}\r\n                menuOpen={this.props.menuOpen} />\r\n\r\n                <UsersList data={this.data[\"TAs\"]}\r\n                type=\"TAs\"\r\n                setEditId={this.setEditId}\r\n                setDeleteId={this.setDeleteId}\r\n                deleteRound={this.deleteRound}\r\n                changeMode={this.props.changeMode}\r\n                menuOpen={this.props.menuOpen} />\r\n                <UsersList data={this.data[\"Students\"]}\r\n                type=\"Students\"\r\n                setEditId={this.setEditId}\r\n                setDeleteId={this.setDeleteId}\r\n                deleteRound={this.deleteRound}\r\n                changeMode={this.props.changeMode}\r\n                menuOpen={this.props.menuOpen} />\r\n\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsersPage;","import React from 'react';\r\nclass HelpPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\" id=\"helpPage\">\r\n            <h1 className=\"help-header\">Help</h1>\r\n            &emsp;OSBLE contains the following help articles:\r\n            <br/>\r\n            <h2 className=\"help-sub-header\">Managing Course and Users</h2>\r\n            <u1>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org/Help/CreateCourse\">creating a New Course</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org//Help/AddingStudents\">Adding students to a course</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org//Help/AddingOthers\">Adding TAs or moderators to a course</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org//Help/RosterGuide\">Managing your Course Roster</a></li>\r\n            </u1>\r\n            <h2 className=\"help-sub-header\">Creating Assignments</h2>\r\n            <u1>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org/Help/CreateBasicAssignment\">Creating basic assignments</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org/Help/CreateReviewAssignment\">Creating a review assignment</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org/Help/CreateReviewDiscussion\">Creating review discussion assignments</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org/Help/CreateRubric\">Creating a Rubric</a></li>\r\n                &emsp;<li><a className=\"help-content\" href=\"https://plus.osble.org/Help/UsingTeamBuilder\">Using the Team Builder</a></li>\r\n                \r\n            </u1>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default HelpPage;\r\n","import React from 'react'\r\n// Code from https://medium.com/@subalerts/create-dynamic-table-from-json-in-react-js-1a4a7b1146ef\r\nexport default class GradeTable extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getRowsData = this.getRowsData.bind(this);\r\n\r\n    }\r\n\r\n    getRowsData = function () {\r\n        var items = this.props.data;\r\n        return items.map((row, index) => {\r\n            return <RenderRow key={index} data={row} />\r\n        })\r\n\r\n    }\r\n    renderTable = () => {\r\n        let table = [];\r\n        for (let r = 0; r < this.props.data.length; ++r) {\r\n            table.push(\r\n                <tr key={r}>\r\n                    <td>{this.props.data[r].date.substring(0, 10)}</td>\r\n                    <td>{this.props.data[r].senderId}</td>\r\n                    <td>{this.props.data[r].subject}</td>\r\n\r\n\r\n                </tr>\r\n            );\r\n        }\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <table className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th class=\"inbox_time_header\">Date:</th>\r\n                            <th class=\"inbox_from_header\">From:</th>\r\n                            <th class=\"inbox_subject_header\">Subject:</th>\r\n                        </tr>\r\n\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.keys(this.props.data).length === 0 ?\r\n                            <tr>\r\n                                <td colSpan=\"5\" style={{ fontStyle: \"italic\" }}>Inbox Empty</td>\r\n                            </tr> : this.renderTable()\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst RenderRow = (props) => {\r\n\r\n\r\n    return <tr key={props.key}>\r\n        <td>{props.data.date}</td>\r\n        <td>{props.data.senderId}</td>\r\n        <td>{props.data.subject}</td>\r\n    </tr>\r\n\r\n}\r\n","import React from 'react';\r\nimport MailTable from './MailTable'\r\n\r\nclass MailPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inbox : [{id\r\n                :\r\n                \"1\",\r\n                senderId\r\n                :\r\n                \"john@wsu.edu\",\r\n                recId\r\n                :\r\n                \"sean@wsu.edu\",\r\n                subject\r\n                :\r\n                \"test\",\r\n                date\r\n                :\r\n                Date(\"1995-12-17T11:24:00.000+00:00\"),\r\n                message\r\n                :\r\n                \"yo cmon pls\"}],\r\n            outbox : [],\r\n            mode : \"inbox\"\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div id =\"mailpage\" className=\"feedpage\">\r\n                <center>\r\n                    <h1 >Inbox</h1>\r\n                    <div class=\"btn-group\" id=\"mail_menu\">\r\n                        <a class=\"btn btn-primary\" >Compose</a>\r\n                        <a class=\"btn btn-primary\" >Inbox</a>\r\n                        <a class=\"btn btn-primary\" >Outbox</a>\r\n                        <input id=\"FormSubmitButton\" type=\"submit\" class=\"btn btn-primary\" disabled=\"disabled\" value=\"Delete\" />\r\n                    </div>\r\n                    <div class=\"MailContent\">\r\n\r\n                        <MailTable data = {this.state.inbox}/>\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MailPage;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nclass ProfilePage extends React.Component {\r\n\r\n    switchToEdit=()=>{\r\n        this.props.changeMode(AppMode.USER_SETTINGS);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"profilePage\" className=\"feedpage\">\r\n            <div className=\"profile-area\">\r\n                {/* The image and userID will be changed once we have a database set up */}\r\n                <div class=\"left-profile\">\r\n                    <img src=\"osble2.png\" height='200' width='200'></img>\r\n                </div>\r\n                <div class=\"right-profile\">\r\n                    <h1 id=\"userID\" className=\"profile-userID\" style={{fontSize:\"75px\"}}>John Ye\r\n                        <table>\r\n                            <tr>\r\n                                <td style={{fontSize:\"20px\"}}><strong>0</strong> post(s)</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{fontSize:\"20px\"}}><strong>0</strong> comment(s)</td>\r\n                            </tr>\r\n                        </table>\r\n                    </h1>\r\n                </div>\r\n                <div class=\"profile-button-area\">\r\n                    <button id=\"edit\" className=\"profile-btn-icon\" onClick={this.switchToEdit}>Edit<span class=\"fa fa-pencil\"></span></button>\r\n                </div>\r\n            </div>\r\n            <p></p>\r\n            <p>\r\n                <h3 className=\"profile-info\" stype={{fontSize:\"50\"}}>Recent Social Activity</h3>\r\n            </p>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default ProfilePage;","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass DeleteCoursePage extends React.Component {\r\n\r\n\r\n    deleteCourse = async (event) => {\r\n        alert(\"Course succesfully deleted\");\r\n        this.props.changeMode(AppMode.FEED);\r\n    }\r\n\r\n    cancelDeleteCourse = async (event) => {\r\n        this.props.changeMode(AppMode.FEED);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"feedpage\">\r\n            <center>\r\n            <h1 >Delete Course</h1>\r\n            <h2>You are about to delete the course titled \"Class Input Here\". Deleting a course is permanent and cannot be undone. Any assignments, submissions, grades, and event data associated with this course will also be removed from the system. If you would like to continue, please click the \"Continue\" button below.</h2>\r\n            </center>\r\n            <center>\r\n            <label className=\"form-deletion-comfirmation-label\">\r\n                {/* Label for ComfirmDeleteCourseBtn */}\r\n                <button\r\n                className=\"Comfirmation-Deletion-Btn\"\r\n                role=\"submit\"\r\n                id=\"ComfirmDeletionOfCourseBtn\"\r\n                type=\"submit\"\r\n                color=\"#191970\"\r\n                onClick={this.deleteCourse}\r\n                >Delete</button>\r\n            </label>\r\n            <label>\r\n                {/* Label for CancelDeleteCourseBtn */}\r\n                <button\r\n                className=\"Cancel-Deletion-Btn\"\r\n                role=\"submit\"\r\n                id=\"CancelDeletionOfCourseBtn\"\r\n                type=\"submit\"\r\n                color=\"#191970\"\r\n                onClick={this.cancelDeleteCourse}\r\n                >Cancel</button>\r\n            </label>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nfunction deleteCourse() {\r\n    alert(\"Course successfully deleted\");    \r\n    this.props.changeMode(AppMode.FEED);\r\n}\r\n\r\nexport default DeleteCoursePage;","import React from \"react\";\r\n\r\nexport default class Course extends React.Component {\r\n    //style={{position:\"absolute\",left:\"10rem\"}}\r\n    render() {\r\n        return (\r\n            <tr key={this.props.key} style={{ borderBottom: \"1px solid #dee2e6\" }}>\r\n                <td><button className=\"postitembutton\" >+</button></td>\r\n                <td >{<div style={{ marginTop: \".7rem\" }}>{this.props.coursename}</div>}</td>\r\n                <td >{<div style={{ marginTop: \".7rem\" }}>{this.props.coursenumber}</div>}</td>\r\n                <td >{<div style={{ marginTop: \".7rem\" }}>{this.props.semester}</div>}</td>\r\n                <td>{<div style={{ marginTop: \".7rem\" }}>{this.props.instructor}</div>}</td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport Course from './Course.js'\r\nclass FindCoursePage extends React.Component {\r\n    loadCourse = async () =>{\r\n        let response = await fetch(\"/courses/\");\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        var index = 0;\r\n        let courses = [...this.state.courses];\r\n        for(index; index<obj.length; index++){\r\n            courses.push({coursename: obj[index].course_name, coursenumber: obj[index].prefix + ' '+ obj[index].course_number,\r\n                        semester: obj[index].term, instructor: obj[index].instructor})\r\n        }\r\n\r\n        this.setState({courses: courses});\r\n        \r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadCourse();\r\n        this.state = {\r\n            courses: []\r\n        };\r\n\r\n    }\r\n    createntries = (entry) => {\r\n        return <Course coursename={entry.coursename} coursenumber={entry.coursenumber} semester={entry.semester} instructor={entry.instructor}></Course>\r\n    }\r\n\r\n    render() {\r\n        var JSONcourses = this.state.courses;\r\n        var JSXcourses = JSONcourses.map(this.createntries)\r\n        return (\r\n            <div className=\"feedpage\">\r\n                <h1 style={{ margin: \"1.5rem\", fontSize: \"30px\" }}>Search For Courses</h1>\r\n                <table className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th style={{width:\"7rem\",paddingLeft:\"1.5rem\"}}>Join</th>\r\n                            <th>Course Name</th>\r\n                            <th>Course Number</th>\r\n                            <th>Semester</th>\r\n                            <th>Instructor</th>\r\n                        </tr>\r\n                        \r\n                    </thead>\r\n                    <tbody>\r\n                        {JSXcourses}\r\n                        \r\n                    </tbody>\r\n                    \r\n                </table>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FindCoursePage;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nclass UserSettingsPage extends React.Component {\r\n    handleSubmit =() =>{\r\n        this.props.changeMode(AppMode.PROFILE);\r\n    }\r\n    render() {\r\n        return (\r\n        <div id='settingPage' className=\"feedpage\">\r\n            <center>\r\n            <h2 className=\"setting-header\">User Settings<span className=\"fa fa-question-circle\"></span></h2>\r\n            </center>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label>\r\n                    First Name:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"firstName\"\r\n                    size=\"30\"\r\n                    placeholder=\"First Name\"\r\n                    type=\"text\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Last Name:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"lastName\"\r\n                    size=\"30\"\r\n                    placeholder=\"Last Name\"\r\n                    type=\"text\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <p></p>\r\n                <button id = \"changeNameButton\" className=\"profileSubmitButton\" onClick={this.handleSubmit}>Change Name</button>\r\n                <br/>\r\n\r\n                <h2 className=\"setting-header\">Reset Email<span className=\"fa fa-question-circle\"></span></h2>\r\n                <label>\r\n                    Email:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"firstName\"\r\n                    size=\"30\"\r\n                    placeholder=\"Enter New Email\"\r\n                    type=\"email\"\r\n                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Repeat Email:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"email\"\r\n                    size=\"30\"\r\n                    placeholder=\"Verify New Email\"\r\n                    type=\"email\"\r\n                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <p></p>\r\n                <button className=\"profileSubmitButton\" onClick={this.handleSubmit}>Change Email</button>\r\n                <br/>\r\n\r\n                <h2 className=\"setting-header\">Change School ID<span className=\"fa fa-question-circle\"></span></h2>\r\n                <label>\r\n                    School ID:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"schoolID\"\r\n                    size=\"30\"\r\n                    placeholder=\"Enter School ID\"\r\n                    type=\"number\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Repeat School ID:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"schoolID\"\r\n                    size=\"30\"\r\n                    placeholder=\"Verify School ID\"\r\n                    type=\"number\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <p></p>\r\n                <button className=\"profileSubmitButton\" onClick={this.handleSubmit}>Change ID</button>\r\n                <br/>\r\n            \r\n                <h2 className=\"setting-header\">Reset Password<span className=\"fa fa-question-circle\"></span></h2>\r\n                <label>\r\n                    Current Password:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"password\"\r\n                    size=\"30\"\r\n                    placeholder=\"Enter Current Password\"\r\n                    type=\"password\"\r\n                    pattern=\r\n                     \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    New Password:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"password\"\r\n                    size=\"30\"\r\n                    placeholder=\"Enter New Password\"\r\n                    type=\"password\"\r\n                    pattern=\r\n                     \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    Repeat New Password:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"password\"\r\n                    size=\"30\"\r\n                    placeholder=\"Verify New Password\"\r\n                    type=\"password\"\r\n                    pattern=\r\n                     \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n//                    onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n                <p></p>\r\n                <button className=\"profileSubmitButton\" onClick={this.handleSubmit}>Change Password</button>\r\n                <br/>\r\n                \r\n                <h2 className=\"setting-header\">Change Profile Picture<span className=\"fa fa-question-circle\"></span></h2>\r\n                <label>\r\n                    <p></p>\r\n                    Current Profile Picture:\r\n                    <img src=\"osble2.png\" height=\"60\" width=\"60\"/>\r\n                    <input\r\n                     className=\"form-control form-text form-center\"\r\n                     name=\"profilePic\"\r\n                     type=\"file\"\r\n                     accept=\"image/x-png,image/gif,image/jpeg\" \r\n//                     ref={this.profilePicRef}\r\n//                     value={this.state.profilePic}\r\n//                     onChange={this.handleChange}\r\n                     />\r\n                </label>\r\n                <p></p>\r\n                <button className=\"profileSubmitButton\" onClick={this.handleSubmit}>Change Picture</button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default UserSettingsPage;","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport AppMode from \"./../AppMode.js\"\r\nclass Admin extends React.Component {\r\n\r\n    constructor() {\r\n      super();\r\n      this.loadUsers();\r\n      this.state = {users:[],\r\n          showConfirmDelete: false};\r\n    }\r\n\r\n    loadUsers = async () =>{\r\n      console.log(\"Loading all users to admin page...\")\r\n        let response = await fetch(\"/users/\");\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);\r\n        var index = 0;\r\n        let users = [];\r\n        for(index; index<obj.length; index++){\r\n            users.push({first_name: obj[index].first_name,\r\n                        last_name: obj[index].last_name,\r\n                        userid: obj[index].userid,\r\n                        email: obj[index].email,\r\n                        is_instructor: obj[index].is_instructor,\r\n                        school: obj[index].school,\r\n                        is_admin: obj[index].is_admin,\r\n                        password: obj[index].password,\r\n                      _id: obj[index]._id})\r\n        }\r\n\r\n        this.setState({users: users});\r\n        \r\n    }\r\n  \r\n  \r\n    //confirmDelete -- Triggered when the user clicks the delete button\r\n    //for a given round. The id paam is the unique property that \r\n    //identifies the round. Set the state variable representing the id\r\n    //of the round to be deleted and then present a dialog box asking\r\n    //the user to confirm the deletion.\r\n    deleteUser = (id) => {\r\n      //this.props.setDeleteId(id);\r\n      //this.setState({showConfirmDelete: true});\r\n    }\r\n    changeRoleCallBack = (userData,id) =>{\r\n        this.updateUser(userData,id);\r\n    \r\n    }\r\n\r\n    changeRole = (index) => {\r\n        let userData = {\r\n            userid: this.state.users[index].userid,\r\n            email: this.state.users[index].email,\r\n            password: this.state.users[index].password,\r\n            first_name: this.state.users[index].first_name,\r\n            last_name: this.state.users[index].last_name,\r\n            school: this.state.users[index].school,\r\n            is_instructor: this.state.users[index].is_instructor == true ? false: true,\r\n            is_admin: this.state.users[index].is_admin,\r\n            //  _id: this.state.users[index]._id\r\n          }\r\n\r\n\r\n        this.changeRoleCallBack(userData,userData.email);\r\n        this.loadUsers();\r\n    }\r\n\r\n    updateUser = async (newData,id) =>{\r\n       \r\n      const url = '/users/' + id\r\n      const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify(newData)}); \r\n    if (res.status == 200) { //successful account creation!\r\n       \r\n    } else { //Unsuccessful account update\r\n        //Grab textual error message\r\n       \r\n    }\r\n    }\r\n  \r\n  \r\n    //renderTable -- render an HTML table displaying the rounds logged\r\n    //by the current user and providing buttons to view/edit and delete each round.\r\n    renderTable = () => {\r\n    let table = [];\r\n    for (let r = 0; r < this.state.users.length; ++r) {\r\n      table.push(\r\n        <tr key={r}>\r\n          <td>{this.state.users[r].first_name + \" \"+this.state.users[r].last_name}</td>\r\n          <td>{this.state.users[r].userid}</td>\r\n          <td>{this.state.users[r].email}</td>\r\n          <td>{String (this.state.users[r].is_instructor)}&nbsp;\r\n          <button onClick={() => this.changeRole(r)}>\r\n                <span className=\"fa fa-pencil\"></span></button>\r\n                </td>\r\n          {/* <td><button onClick={this.props.menuOpen ? null : () => \r\n            this.editRound(r)}>\r\n                <span className=\"fa fa-eye\"></span></button></td> */}\r\n          <td><button onClick={() => this.deleteUser(r)}>\r\n                <span className=\"fa fa-trash\"></span></button> </td>\r\n        </tr> \r\n      );\r\n    }\r\n    return table;\r\n    }\r\n  \r\n    //render--render the entire rounds table with header, displaying a \"No\r\n    //Rounds Logged\" message in case the table is empty.\r\n    render() {\r\n      return(\r\n      <div className=\"padded-page\">\r\n        <h1></h1>\r\n        <table className=\"table table-hover\">\r\n          <thead className=\"thead-light\">\r\n          <tr>\r\n            <th>NAME</th>\r\n            <th>ID</th>\r\n            <th>EMAIL ADDRESS</th>\r\n            <th>INSTRUCTOR ROLE</th>\r\n            <th>DELETE</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.state.users).length === 0 ? \r\n            <tr>\r\n            <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No users registered</td>\r\n            </tr> : this.renderTable()\r\n            }\r\n          </tbody>\r\n        </table>\r\n        {/* {this.state.showConfirmDelete ?\r\n          <ConfirmDeleteRound \r\n            close={() => this.setState({showConfirmDelete: false})} \r\n            deleteRound={this.deleteRound} /> : null} */}\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Admin;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport Register from './RegisterPage'\r\nimport ResetPassword from './ResetPasswordPage'\r\nimport Grades from './GradesPage'\r\nimport Assignments from './AssignmentsPage'\r\nimport Analytics from './AnalyticsPage'\r\nimport CourseSettings from './CourseSettingsPage'\r\nimport Users from './UsersPage'\r\nimport Help from './HelpPage'\r\nimport Mail from './MailPage'\r\nimport Profile from './ProfilePage'\r\nimport DeleteCourse from './DeleteCoursePage'\r\nimport FindCourse from './FindCoursePage'\r\nimport UserSettings from './UserSettingsPage'\r\nimport Administrator from './Admin'\r\nimport { async } from 'regenerator-runtime';\r\n\r\n\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.ADMIN] = \"Administrator\"\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Dashboard\";\r\nmodeTitle[AppMode.REGISTER] = \"Register\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\nmodeTitle[AppMode.RESET] = \"Reset Password\";\r\nmodeTitle[AppMode.GRADES] = \"Grades\";\r\nmodeTitle[AppMode.USERS] = \"Users\";\r\nmodeTitle[AppMode.ANALYTICS] = \"Analytics\";\r\nmodeTitle[AppMode.ASSIGNMENTS] = \"Assignments\";\r\nmodeTitle[AppMode.COURSE_SETTINGS] = \"Course Settings\";\r\nmodeTitle[AppMode.HELP] = \"Help\";\r\nmodeTitle[AppMode.MAIL] = \"Mail\";\r\nmodeTitle[AppMode.PROFILE] = \"Profile\";\r\nmodeTitle[AppMode.DELETE_COURSE] = \"Delete Course\";\r\nmodeTitle[AppMode.FIND_COURSE] = \"Find Course\";\r\nmodeTitle[AppMode.USER_SETTINGS] = \"User Settings\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.ADMIN] = Administrator;\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.REGISTER] = Register;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.RESET] = ResetPassword;\r\nmodeToPage[AppMode.GRADES] = Grades;\r\nmodeToPage[AppMode.USERS] = Users;\r\nmodeToPage[AppMode.ANALYTICS] = Analytics;\r\nmodeToPage[AppMode.ASSIGNMENTS] = Assignments;\r\nmodeToPage[AppMode.COURSE_SETTINGS] = CourseSettings;\r\nmodeToPage[AppMode.HELP] = Help;\r\nmodeToPage[AppMode.MAIL] = Mail;\r\nmodeToPage[AppMode.PROFILE] = Profile;\r\nmodeToPage[AppMode.DELETE_COURSE] = DeleteCourse;\r\nmodeToPage[AppMode.FIND_COURSE] = FindCourse;\r\nmodeToPage[AppMode.USER_SETTINGS] = UserSettings;\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n\r\n    super();\r\n    this.state = {\r\n      mode: AppMode.LOGIN,\r\n      menuOpen: false,\r\n      authenticated: false,\r\n      userObj: { displayName: \"\", profilePicURL: \"\" },\r\n      selectedCourse: {},\r\n      Enrolledcourses: {},\r\n      editAccount: false,\r\n      showEditAccountDialog: false,\r\n      statusMsg: \"\",\r\n      showAboutDialog: false,\r\n      createCourse: true\r\n    };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n\r\n    if (!this.state.authenticated) {\r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            console.log(\"inside didmount \")\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            }, async function () {\r\n              console.log(\"inside didmount \")\r\n\r\n              if (this.state.userObj.is_instructor === true) {\r\n                // gets all courses currently logged in proffesor is teaching\r\n                let response = await fetch(\"courses/profCourses/\" + this.state.userObj.userid);\r\n                response = await response.json();\r\n                const obj = JSON.parse(response);\r\n                if (obj.length != 0) { // if there are courses\r\n                  this.setState({selectedCourse: obj[0],Enrolledcourses:obj})\r\n                  console.log(obj);\r\n                } else {\r\n                  \r\n                  this.setState({\r\n                    mode: AppMode.COURSE_SETTINGS,\r\n                    selectedCourse: null\r\n                  })\r\n                  //instructor has no courses\r\n                }\r\n              } else {\r\n                let response = await fetch(\"courses/studentCourses/\" + this.state.userObj.userid);\r\n                response = await response.json();\r\n                const obj = JSON.parse(response);\r\n                console.log(obj)\r\n                if (obj.length != 0) {\r\n                  this.setState({\r\n                    selectedCourse: obj[0],Enrolledcourses: obj})\r\n                  console.log(obj);\r\n                } else {\r\n                  this.setState({\r\n                    mode: AppMode.FIND_COURSE,\r\n                    selectedCourse: null\r\n                  })\r\n                  // student not enrolled in any courses\r\n                }\r\n\r\n              }\r\n\r\n            });\r\n          }\r\n\r\n        }\r\n        )\r\n\r\n    }\r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async (newMode) => {\r\n    //console.log(\"HERE\");\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n    if (newMode === AppMode.FEED){\r\n    let response2 = await fetch(\"courses/studentCourses/\" + this.state.userObj.userid);\r\n    response2 = await response.json();\r\n    const obj2 = JSON.parse(response);\r\n    console.log(obj2)\r\n    if (obj2.length != 0) {\r\n      this.setState({\r\n        selectedCourse: obj2[0],\r\n      })\r\n      console.log(obj2);\r\n    } else {\r\n      this.setState({\r\n       \r\n        selectedCourse: null\r\n      })\r\n      // student not enrolled in any courses\r\n    }\r\n  }\r\n  }\r\n\r\n  loadCourses = async() =>{\r\n    if (this.state.userObj.is_instructor === true) {\r\n      // gets all courses currently logged in proffesor is teaching\r\n      let response = await fetch(\"courses/profCourses/\" + this.state.userObj.userid);\r\n      response = await response.json();\r\n      const obj = JSON.parse(response);\r\n      this.setState({Enrolledcourses: obj});\r\n    }\r\n  }\r\n\r\n  updateSelectedCourse = (_id) =>{\r\n    var index = 0;\r\n    for(index;index<this.state.Enrolledcourses.length;index++){\r\n      if(this.state.Enrolledcourses[index]._id == _id){\r\n          this.setState({selectedCourse:this.state.Enrolledcourses[index]});\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  createCourse = (arg) => {\r\n    this.setState( { createCourse: arg });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    \r\n    this.setState({ mode: newMode });\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({ menuOpen: true });\r\n  }\r\n\r\n  closeMenu = () => {\r\n    this.setState({ menuOpen: false });\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({ menuOpen: !prevState.menuOpen }));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({\r\n      userId: Id,\r\n      authenticated: true\r\n    });\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({ showEditAccountDialog: true });\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({ showEditAccountDialog: false });\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({\r\n        showEditAccountDialog: false,\r\n        statusMsg: msg,\r\n        mode: AppMode.LOGIN\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showEditAccountDialog: false,\r\n        statusMsg: msg\r\n      });\r\n    }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({ statusMsg: \"\" });\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ?\r\n          <AboutBox close={() => this.setState({ showAboutDialog: false })} /> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n          <span>{this.state.statusMsg}</span>\r\n          <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n            <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {/* {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null} */}\r\n        {this.state.mode == AppMode.LOGIN || this.state.mode == AppMode.REGISTER ? null : <NavBar\r\n          Enrolledcourses={this.state.Enrolledcourses}\r\n          userObj={this.state.userObj}\r\n          selectedCourse={this.state.selectedCourse}\r\n          updateSelectedCourse={this.updateSelectedCourse}\r\n          dashboard={modeTitle[this.state.mode]}\r\n          grades={modeTitle[AppMode.GRADES]}\r\n          assignments={modeTitle[AppMode.ASSIGNMENTS]}\r\n          users={modeTitle[AppMode.USERS]}\r\n          userObj={this.state.userObj}\r\n          analytics={modeTitle[AppMode.ANALYTICS]}\r\n          settings={modeTitle[AppMode.COURSE_SETTINGS]}\r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          createCourse={this.createCourse}\r\n          toggleMenuOpen={this.toggleMenuOpen} />}\r\n        <SideMenu\r\n          menuOpen={this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          createCourse = {this.state.createCourse}\r\n          toggleMenuOpen={this.toggleMenuOpen}\r\n          displayName={this.state.userObj.displayName}\r\n          profilePicURL={this.state.userObj.profilePicURL}\r\n          localAccount={this.state.userObj.authStrategy === \"local\"}\r\n          editAccount={this.showEditAccount}\r\n          logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n          showAbout={() => { this.setState({ showAboutDialog: true }) }} />\r\n        {/* <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/> */}\r\n        <ModePage\r\n          create={false} // this will be set to \r\n          menuOpen={this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          loadCourses={this.loadCourses}\r\n          changeMode={this.handleChangeMode}\r\n          userObj={this.state.userObj}\r\n          selectedCourse={this.state.selectedCourse}\r\n          Enrolledcourses = {this.state.Enrolledcourses}\r\n          refreshOnUpdate={this.refreshOnUpdate} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}