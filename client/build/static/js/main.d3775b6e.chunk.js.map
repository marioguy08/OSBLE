{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/CreateEditAccountDialog.js","components/ConfirmDeleteAccount.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/RegisterPage.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","REGISTER","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","CreateEditAccountDialog","checkDataValidity","state","password","passwordRepeat","repeatPassRef","current","setCustomValidity","handleChange","event","formUpdated","origAccountInfo","formIsUpdated","target","name","value","length","setState","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","deleteAccount","confirmDelete","confirmDeleteAccount","e","newUserRef","createRef","userId","json","parse","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","focus","errorMsg","checkForSubmit","code","role","cancelResetPassword","onSubmit","type","placeholder","pattern","ref","onKeyUp","LookUpAccountDialog","handleLookUpAccount","emailRef","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","size","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","rows","cols","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","signUp","githubIcon","githubLabel","loginMsg","newAccountCreated","style","position","right","htmlFor","padding","fontSize","fontWeight","backgroundColor","required","cancel","FeedPage","fontStyle","ConfirmDeleteRound","close","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","onChange","maxLength","max","disabled","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","RegisterPage","createAccount","handleRegister","email","confirm_email","confirm_password","first_name","confirm_first_name","last_name","confirm_last_name","confirm_id","handleOnChange","school","confirm_emailRef","passwordRef","confirm_passwordRef","fnameRef","confirm_fnameRef","lnameRef","confirm_lnameRef","IDRef","confirmIDRef","validated","color","autocomplete","modeTitle","modeToPage","Register","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3775b6e.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    REGISTER : \"RegisterMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ||  this.props.mode === AppMode.REGISTER? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED  || this.props.mode === AppMode.REGISTER? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n//     render() {\r\n//     return (  \r\n//     <div className=\"modal\" role=\"dialog\">\r\n//     <div className=\"modal-dialog modal-lg\"></div>\r\n//         <div className=\"modal-content form-center\">\r\n//             <div className=\"modal-header\">\r\n//               <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n//               <button className=\"modal-close\" \r\n//                        onClick={this.props.cancel}>\r\n//                 &times;</button>\r\n//             </div>\r\n//             <div className=\"modal-body\">\r\n//             <form onSubmit={this.handleSubmit}>\r\n//             <label>\r\n//                 Email: \r\n//                 <input  \r\n//                 autocomplete=\"off\"\r\n//                 disabled={!this.props.create}\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"accountName\"\r\n//                 type=\"email\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Enter Email Address\"\r\n//                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n//                 required={true}\r\n//                 ref={this.newUserRef}\r\n//                 value={this.state.accountName}\r\n//                 onChange={this.handleChange}\r\n//                 onBlur={this.setDefaultDisplayName}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Password:\r\n//                 <input\r\n//                 autocomplete=\"off\"\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"password\"\r\n//                 type=\"password\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Enter Password\"\r\n//                 pattern=\r\n//                 \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n//                 required={true}\r\n//                 value={this.state.password}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Repeat Password:\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"passwordRepeat\"\r\n//                 type=\"password\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Repeat Password\"\r\n//                 required={true}\r\n//                 ref={this.repeatPassRef}\r\n//                 value={this.state.passwordRepeat}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Display Name:\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"displayName\"\r\n//                 type=\"text\"\r\n//                 size=\"30\"\r\n//                 placeholder=\"Display Name\"\r\n//                 required={true}\r\n//                 value={this.state.displayName}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Profile Picture:<br/>\r\n//                 <input\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"profilePic\"\r\n//                 type=\"file\"\r\n//                 accept=\"image/x-png,image/gif,image/jpeg\" \r\n//                 ref={this.profilePicRef}\r\n//                 value={this.state.profilePic}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//                 <img src={this.state.profilePicURL != \"\" ? \r\n//                             this.state.profilePicURL :\r\n//                             this.state.profilePicDataURL} \r\n//                         height=\"60\" width=\"60\" \r\n//                  />\r\n//             </label> \r\n//             <br/>\r\n//             <label>\r\n//                 Security Question:\r\n//                 <textarea\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"securityQuestion\"\r\n//                 size=\"35\"\r\n//                 placeholder=\"Security Question\"\r\n//                 rows=\"2\"\r\n//                 cols=\"35\"\r\n//                 maxLength=\"100\"\r\n//                 required={true}\r\n//                 value={this.state.securityQuestion}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             <label>\r\n//                 Answer to Security Question:\r\n//                 <textarea\r\n//                 className=\"form-control form-text form-center\"\r\n//                 name=\"securityAnswer\"\r\n//                 type=\"text\"\r\n//                 placeholder=\"Answer\"\r\n//                 rows=\"2\"\r\n//                 cols=\"35\"\r\n//                 maxLength=\"100\"\r\n//                 required={true}\r\n//                 value={this.state.securityAnswer}\r\n//                 onChange={this.handleChange}\r\n//                 />\r\n//             </label>\r\n//             <br/>\r\n//             {!this.props.create ?  \r\n//             <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n//                 Delete Account...\r\n//             </button> : null}\r\n//             <br/><br/>\r\n//             <button role=\"submit\" \r\n//                 disabled={!this.state.formUpdated}\r\n//                 className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n//                 <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n//                 &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n//             </button>\r\n//             </form>\r\n//             </div>\r\n//         </div>\r\n//         {this.state.confirmDelete ? \r\n//           <ConfirmDeleteAccount email={this.state.accountName}\r\n//                                 deleteAccount={this.deleteAccount}\r\n//                                 close={() => (this.setState({confirmDelete: false}))}\r\n//          /> : null}\r\n//     </div>\r\n//     );\r\n// }\r\n\r\n\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport './LoginPage.css';\r\nimport AppMode from '../AppMode.js';\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.emailInputRef = React.createRef();\r\n        this.resetUserId = \"\";\r\n        this.resetQ = \"\";\r\n        this.resetA = \"\";\r\n        this.passwordInputRef = React.createRef();\r\n        this.state = {\r\n            statusMsg: \"\",\r\n            loginBtnIcon: \"fa fa-sign-in\",\r\n            loginBtnLabel: \"Log In\",\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: false,\r\n            showResetPaswordDialog: false,\r\n            githubIcon: \"fa fa-github\",\r\n            githubLabel: \"Sign in with GitHub\",\r\n            loginMsg: \"\",\r\n            newAccountCreated: false\r\n        };\r\n    }\r\n\r\n    //Focus cursor in email input field when mounted\r\n    componentDidMount() {\r\n        this.emailInputRef.current.focus();\r\n    }\r\n\r\n    //handleLoginSubmit -- Called when user clicks on login button.\r\n    handleLoginSubmit = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n            loginBtnLabel: \"\"\r\n        });\r\n        const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n            \"&password=\" + this.passwordInputRef.current.value;\r\n        const res = await fetch(url, { method: 'POST' });\r\n        if (res.status == 200) { //successful login!\r\n            window.open(\"/\", \"_self\");\r\n        } else { //Unsuccessful login\r\n            const resText = await res.text();\r\n            this.setState({\r\n                loginBtnIcon: \"fa fa-sign-in\",\r\n                loginBtnLabel: \"Log In\",\r\n                statusMsg: resText\r\n            });\r\n        }\r\n    }\r\n\r\n    //accountCreateDone -- Called by child CreateAccountDialog component when \r\n    //user attempted to create new account. Hide the dialog and display \r\n    //a message indicating result of the attempt.\r\n    accountCreateDone = (msg) => {\r\n        this.setState({\r\n            statusMsg: msg,\r\n            showCreateAccountDialog: false\r\n        });\r\n    }\r\n\r\n    //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n    //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n    cancelCreateAccount = () => {\r\n        this.setState({ showCreateAccountDialog: false });\r\n    }\r\n\r\n    //cancelResetPassword -- Called by one of the child three child dialog box components when\r\n    //the user decides to cancel resetting their password. Toggles state so that all three\r\n    //of the dialog boxes are hidden\r\n    cancelResetPassword = () => {\r\n        this.resetUserId = \"\";\r\n        this.resetQ = \"\";\r\n        this.resetA = \"\";\r\n        this.setState({\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: false,\r\n            showResetPaswordDialog: false\r\n        });\r\n    }\r\n\r\n    //handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n    //provider\r\n    handleOAuthLogin = (provider) => {\r\n        window.open(`/auth/${provider}`, \"_self\");\r\n    }\r\n\r\n    //handleOAuthLoginClick -- Called whent the user clicks on button to\r\n    //authenticate via a third-party OAuth service. The name of the provider is\r\n    //passed in as a parameter.\r\n    handleOAuthLoginClick = (provider) => {\r\n        this.setState({\r\n            [provider + \"Icon\"]: \"fa fa-spin fa-spinner\",\r\n            [provider + \"Label\"]: \"Connecting...\"\r\n        });\r\n        setTimeout(() => this.handleOAuthLogin(provider), 1000);\r\n    }\r\n\r\n    //getSecurityAnswer: Given the id, security question, and security answer obtained\r\n    //from the LookUpAccountDialog component, update state such that the user will\r\n    //next be prompted to enter security question and answer for verification\r\n    getSecurityAnswer = (userId, question, answer) => {\r\n        this.resetUserId = userId;\r\n        this.resetQ = question;\r\n        this.resetA = answer;\r\n        this.setState({\r\n            showLookUpAccountDialog: false,\r\n            showSecurityQuestionDialog: true\r\n        });\r\n    }\r\n\r\n    //getNewPassword-- Called after user successfully provides correct answer\r\n    //to security question. Presents the \"Reset Password\" dialog box.\r\n    getNewPassword = () => {\r\n        this.setState({\r\n            showSecurityQuestionDialog: false,\r\n            showResetPaswordDialog: true\r\n        });\r\n    }\r\n\r\n    //resetPassword--Called after the user successfully enters a new (acceptable)\r\n    //password. pw contains the new password. Call on the Update (PUT) server\r\n    //route to update the user's password in the database.\r\n    resetPassword = async (pw) => {\r\n        const url = \"/users/\" + this.resetUserId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify({ password: pw })\r\n        });\r\n        if (res.status == 200) { //successful update creation!\r\n            this.setState({\r\n                showResetPaswordDialog: false,\r\n                statusMsg: \"Password successfully reset!\"\r\n            });\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.setState({\r\n                showResetPasswordDialog: false,\r\n                statusMsg: resText\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //newAccountCreated -- Called after successful creation of a new account\r\n    accountCreateDone = (msg, deleted) => {\r\n        this.setState({\r\n            statusMsg: msg,\r\n            showCreateAccountDialog: false\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\n    closeStatusMsg = () => {\r\n        this.setState({ statusMsg: \"\" });\r\n    }\r\n\r\n    //cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\n    cancelCreateAccount = () => {\r\n        this.setState({ showCreateAccountDialog: false });\r\n    }\r\n\r\n    signUp = () =>{\r\n        this.props.changeMode(AppMode.REGISTER);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"osblepage\">\r\n                <center>\r\n                    <div className=\"wrapper\">\r\n                        <center>\r\n                            <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{position:\"relative\",right:\".7rem\"}}></img>\r\n                            {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                                <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                                    <span className=\"fa fa-times\"></span>\r\n                                </button></div> : null}\r\n                            {this.state.showLookUpAccountDialog ?\r\n                                <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                    getSecurityAnswer={this.getSecurityAnswer} /> : null}\r\n                            {this.state.showSecurityQuestionDialog ?\r\n                                <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                    question={this.resetQ}\r\n                                    answer={this.resetA}\r\n                                    getNewPassword={this.getNewPassword} /> : null}\r\n                            {this.state.showResetPaswordDialog ?\r\n                                <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                    resetPassword={this.resetPassword} /> : null}\r\n                            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n                                <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24, fontWeight: \"500\" }}>\r\n                                    \r\n                <input\r\n                                        style={{ backgroundColor: \"white\" }}\r\n                                        ref={this.emailInputRef}\r\n                                        className=\"form-control enterEmail\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        id=\"emailInput\"\r\n                                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                                        required={true}\r\n                                    />\r\n                                </label>\r\n                                \r\n                                <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24, fontWeight: \"500\" }}>\r\n                                    \r\n                <input\r\n                                        ref={this.passwordInputRef}\r\n                                        className=\"form-control enterPassword\"\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                                        required={true}\r\n                                    />\r\n                                </label>\r\n\r\n                                <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n                                \r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\" btn btn-primary btn-block LoginButton\">\r\n                                    <span id=\"login-btn-icon\" className={this.state.loginBtnIcon} />\r\n                &nbsp;{this.state.loginBtnLabel}\r\n                                </button>\r\n                                <br></br>\r\n                                <p>\r\n                                    <button type=\"button\" className=\"btn btn-link login-link\"\r\n                                        onClick={this.signUp}>\r\n                                        Create an account</button> |\r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                                        onClick={() => { this.setState({ showLookUpAccountDialog: true }); }}>\r\n                                        Reset your password</button>\r\n                                </p>\r\n\r\n                            </form>\r\n                            {this.state.showCreateAccountDialog ?\r\n                                <CreateEditAccountDialog\r\n                                    create={true}\r\n                                    done={this.accountCreateDone}\r\n                                    cancel={this.cancelCreateAccount} /> : null}\r\n                            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n                        </center>\r\n                    </div>\r\n                </center>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport AppMode from \"./../AppMode.js\"\r\n\r\nclass RegisterPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.emailRef = React.createRef();\r\n        this.confirm_emailRef = React.createRef();\r\n        this.passwordRef = React.createRef();\r\n        this.confirm_passwordRef = React.createRef();\r\n        this.fnameRef = React.createRef();\r\n        this.confirm_fnameRef = React.createRef();\r\n        this.lnameRef = React.createRef();\r\n        this.confirm_lnameRef = React.createRef(); \r\n        this.IDRef = React.createRef();\r\n        this.confirmIDRef = React.createRef(); \r\n\r\n        this.state = {\r\n            email: \"\",\r\n            confirm_email: \"\",\r\n            password: \"\",\r\n            confirm_password: \"\",\r\n            first_name: \"\",\r\n            last_name: \"\",\r\n            confirm_last_name: \"\",\r\n            confirm_first_name:\"\",\r\n            school: \"\",\r\n            id: 0,\r\n            confirm_id: 0,\r\n            validated: true,\r\n        };\r\n    }\r\n\r\n    createAccount = () =>{\r\n        this.props.changeMode(AppMode.LOGIN);\r\n    }\r\n\r\n    \r\n\r\n    handleRegister = (event) =>{\r\n        event.preventDefault();\r\n         if(this.state.email == this.state.confirm_email &&\r\n            this.state.password == this.state.confirm_password &&\r\n            this.state.first_name == this.state.confirm_first_name &&\r\n            this.state.last_name == this.state.confirm_last_name &&\r\n            this.state.id == this.state.confirm_id){\r\n            this.createAccount();\r\n        }\r\n        \r\n    }\r\n\r\n    handleOnChange = (event) =>{\r\n        if(event.target.name == \"email\"){\r\n            this.setState({email: event.target.value});\r\n        }\r\n\r\n        else if(event.target.name == \"confirm_email\"){\r\n            this.setState({confirm_email: event.target.value});\r\n        }\r\n        else if(event.target.name == \"password\"){\r\n            this.setState({password: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_password\"){\r\n            this.setState({confirm_password: event.target.value});\r\n        }\r\n        else if(event.target.name == \"first_name\"){\r\n            this.setState({first_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"last_name\"){\r\n            this.setState({last_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_last_name\"){\r\n            this.setState({confirm_last_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_first_name\"){\r\n            this.setState({confirm_first_name: event.target.value});\r\n        }\r\n        else if(event.target.name == \"school\"){\r\n            this.setState({school: event.target.value});\r\n        }\r\n        else if(event.target.name == \"id\"){\r\n            this.setState({id: event.target.value});\r\n        }\r\n        else if(event.target.name == \"confirm_id\"){\r\n            this.setState({confirm_id: event.target.value});\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"osblepage\">\r\n            <center>\r\n            <img src=\"https://i.imgur.com/lBOwYfO.png\" style={{position:\"relative\",right:\".7rem\"}}></img>\r\n            <p className = \"paragraph\" style={{color: 'white', fontWeight: 'bold'}}>\r\n            Create a New Account &nbsp; <span className=\"fa fa-question-circle\"></span></p> \r\n            <p className= \"paragraph\" style={{color: 'white', fontWeight: 'bold'}}>Login Information</p>\r\n            \r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleRegister}>\r\n            <label className=\"form-label\">\r\n                 Email address  \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"email\"\r\n                 type=\"email\"\r\n                 size=\"35\"\r\n                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                 required={true}\r\n                 ref={this.emailRef}\r\n                onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label className=\"form-label\">\r\n                 Confirm email address  \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_email\"\r\n                 type=\"email\"\r\n                 size=\"35\"\r\n                 pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                 required={true}\r\n                 ref={this.confirm_emailRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label className=\"form-label\">\r\n                 Password\r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"password\"\r\n                 type=\"password\"\r\n                 size=\"35\"\r\n                 pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                 required={true}\r\n                 ref={this.passwordRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm password\r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_password\"\r\n                 type=\"password\"\r\n                 size=\"35\"\r\n                 pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                 required={true}\r\n                 ref={this.confirm_passwordRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <p className = \"paragraph\" style={{color: 'white', fontWeight: 'bold'}}>Identification</p>\r\n            <label  className=\"form-label\">\r\n                 First name \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"first_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.fnameRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Last name \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"last_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.lnameRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm last name \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_last_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.confirm_lnameRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm first name \r\n                 <input  style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center\"\r\n                 name=\"confirm_first_name\"\r\n                 type=\"text\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.confirm_fnameRef}\r\n                 onChange={this.handleOnChange} />\r\n            </label>\r\n            <p className = \"paragraph form-label\">School Information</p>\r\n            <p style={{color: 'white'}}>Don't see your school in the list? Request that it be added</p>\r\n            <label  className=\"form-label\">\r\n            <select name=\"school\" style={{width:\"600px\"}}\r\n            className=\"form-control form-center\" onChange={this.handleOnChange}>\r\n            <option value=\"Washington State University\">Washington State University</option>\r\n            <option value=\"University of Washington\">University of Washington</option>\r\n            <option value=\"Western Washington University\">Western Washington University</option>\r\n            <option value=\"Seattle University\">Seattle University</option>\r\n          </select>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Student, Faculty, or Staff ID Number \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text\"\r\n                 name=\"id\"\r\n                 type=\"number\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.IDRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br/>\r\n            <label  className=\"form-label\">\r\n                 Confirm Student, Faculty, or Staff ID Number \r\n                 <input style={{width:\"600px\"}}\r\n                 autocomplete=\"off\"\r\n                 className=\"form-control form-text form-center formSize\"\r\n                 name=\"confirm_id\"\r\n                 type=\"number\"\r\n                 size=\"35\"\r\n                 required={true}\r\n                 ref={this.confirmIDRef}\r\n                 onChange={this.handleOnChange}/>\r\n            </label>\r\n            <br></br>\r\n            <button className=\"register-btn\" role=\"submit\" type=\"submit\">Register</button>\r\n            </form>\r\n            </div>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default RegisterPage;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport Register from './RegisterPage'\r\n\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.REGISTER] = \"Register\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.REGISTER] = Register;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {/* {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null} */}\r\n        {this.state.mode == AppMode.LOGIN || this.state.mode == AppMode.REGISTER ? null:<NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>}\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          {/* <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/> */}\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}